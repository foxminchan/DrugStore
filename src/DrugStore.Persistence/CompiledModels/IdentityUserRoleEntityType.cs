// <auto-generated />
using System;
using System.Reflection;
using DrugStore.Domain.IdentityAggregate.Primitives;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace DrugStore.Persistence.CompiledModels
{
    internal partial class IdentityUserRoleEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Microsoft.AspNetCore.Identity.IdentityUserRole<DrugStore.Domain.IdentityAggregate.Primitives.IdentityId>",
                typeof(IdentityUserRole<IdentityId>),
                baseEntityType);

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(IdentityId),
                propertyInfo: typeof(IdentityUserRole<IdentityId>).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUserRole<IdentityId>).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            userId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer: new ValueComparer<IdentityId>(
                    (IdentityId v1, IdentityId v2) => v1.Equals(v2),
                    (IdentityId v) => v.GetHashCode(),
                    (IdentityId v) => v),
                keyComparer: new ValueComparer<IdentityId>(
                    (IdentityId v1, IdentityId v2) => v1.Equals(v2),
                    (IdentityId v) => v.GetHashCode(),
                    (IdentityId v) => v),
                providerValueComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "uuid"),
                converter: new ValueConverter<IdentityId, Guid>(
                    (IdentityId c) => c.Value,
                    (Guid c) => new IdentityId(c)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<IdentityId, Guid>(
                    JsonGuidReaderWriter.Instance,
                    new ValueConverter<IdentityId, Guid>(
                        (IdentityId c) => c.Value,
                        (Guid c) => new IdentityId(c))));
            userId.SetSentinelFromProviderValue(new Guid("00000000-0000-0000-0000-000000000000"));
            userId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            userId.AddAnnotation("Relational:ColumnName", "user_id");
            userId.AddAnnotation("Relational:DefaultValueSql", "uuid_generate_v4()");

            var roleId = runtimeEntityType.AddProperty(
                "RoleId",
                typeof(IdentityId),
                propertyInfo: typeof(IdentityUserRole<IdentityId>).GetProperty("RoleId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUserRole<IdentityId>).GetField("<RoleId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            roleId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer: new ValueComparer<IdentityId>(
                    (IdentityId v1, IdentityId v2) => v1.Equals(v2),
                    (IdentityId v) => v.GetHashCode(),
                    (IdentityId v) => v),
                keyComparer: new ValueComparer<IdentityId>(
                    (IdentityId v1, IdentityId v2) => v1.Equals(v2),
                    (IdentityId v) => v.GetHashCode(),
                    (IdentityId v) => v),
                providerValueComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "uuid"),
                converter: new ValueConverter<IdentityId, Guid>(
                    (IdentityId c) => c.Value,
                    (Guid c) => new IdentityId(c)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<IdentityId, Guid>(
                    JsonGuidReaderWriter.Instance,
                    new ValueConverter<IdentityId, Guid>(
                        (IdentityId c) => c.Value,
                        (Guid c) => new IdentityId(c))));
            roleId.SetSentinelFromProviderValue(new Guid("00000000-0000-0000-0000-000000000000"));
            roleId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            roleId.AddAnnotation("Relational:ColumnName", "role_id");
            roleId.AddAnnotation("Relational:DefaultValueSql", "uuid_generate_v4()");

            var key = runtimeEntityType.AddKey(
                new[] { userId, roleId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "pk_asp_net_user_roles");

            var index = runtimeEntityType.AddIndex(
                new[] { roleId });
            index.AddAnnotation("Relational:Name", "ix_asp_net_user_roles_role_id");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RoleId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            runtimeForeignKey.AddAnnotation("Relational:Name", "fk_asp_net_user_roles_asp_net_roles_role_id");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("UserId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            runtimeForeignKey.AddAnnotation("Relational:Name", "fk_asp_net_user_roles_asp_net_users_user_id");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "AspNetUserRoles");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
