// <auto-generated />
using System;
using DrugStore.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DrugStore.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DrugStore.Domain.CategoryAggregate.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 3, 19, 15, 53, 49, 759, DateTimeKind.Utc).AddTicks(4385))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 3, 19, 15, 53, 49, 759, DateTimeKind.Utc).AddTicks(4770))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("7acc41fc-5235-4bce-a907-95202fdb8c8d"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c549a74-7bd3-4983-b8aa-abef758da155"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3095),
                            Description = "Drugs used to relieve pain without causing loss of consciousness.",
                            Name = "Analgesics",
                            Version = new Guid("98abb4e9-a486-45aa-a663-0d6adc5e016c")
                        },
                        new
                        {
                            Id = new Guid("d4bc8e7b-604c-46cd-8a68-0e2143999de9"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3117),
                            Description = "Medications used to treat bacterial infections.",
                            Name = "Antibiotics",
                            Version = new Guid("dd1fc85f-4780-42ec-9f15-63c3cf63093c")
                        },
                        new
                        {
                            Id = new Guid("b6b160f2-b2db-46a6-ba25-180dfaa0997e"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3122),
                            Description = "Medications used to alleviate symptoms of depression.",
                            Name = "Antidepressants",
                            Version = new Guid("9de198f6-5a32-4a27-8af4-3d0f955f5217")
                        },
                        new
                        {
                            Id = new Guid("5e9e5dd9-942f-4f07-adc8-4a34e305cc17"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3125),
                            Description = "Medications used to treat fungal infections.",
                            Name = "Antifungals",
                            Version = new Guid("e40546f5-ef00-4ca5-8670-6eb0b8121046")
                        },
                        new
                        {
                            Id = new Guid("e5d59b35-afa4-4904-8b66-7f587f3279ab"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3128),
                            Description = "Drugs used to treat viral infections.",
                            Name = "Antivirals",
                            Version = new Guid("c477a9e2-0b97-4e51-8d2e-f83cc072f0d3")
                        },
                        new
                        {
                            Id = new Guid("95b31ea2-724b-4081-beaa-cb0d363f86d2"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3136),
                            Description = "Medications used to prevent or alleviate nausea and vomiting.",
                            Name = "Anti emetics",
                            Version = new Guid("083c1bb5-73de-499d-b8b7-b6111c407563")
                        },
                        new
                        {
                            Id = new Guid("de686350-57a5-4cb4-917c-8ace222dc878"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3139),
                            Description = "Drugs that block the action of histamine and are used to treat allergic conditions.",
                            Name = "Antihistamines",
                            Version = new Guid("ff609612-4c31-44ca-b263-ee9c4c1d6a66")
                        },
                        new
                        {
                            Id = new Guid("4cc2c3ca-1edb-4216-a0e0-69a1cb8cfb6b"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3142),
                            Description = "Medications used to lower blood pressure.",
                            Name = "Anti hypertensives",
                            Version = new Guid("3a8db586-88d2-4250-8f40-6e4250104392")
                        },
                        new
                        {
                            Id = new Guid("01c8f6c7-0151-44db-83fd-06f0c5ff381e"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3144),
                            Description = "Medications used to reduce inflammation and alleviate pain.",
                            Name = "Anti-inflammatory Drugs",
                            Version = new Guid("9a170908-f7a2-4a2d-ad4c-cf0e0f8c978c")
                        },
                        new
                        {
                            Id = new Guid("fdbec5f9-05d1-4fc5-81d5-817314a84dec"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3150),
                            Description = "Medications used to relax the muscles in the airways, making breathing easier.",
                            Name = "Bronchiectasis",
                            Version = new Guid("3b1e5ef4-c886-4585-90cf-4bc794531857")
                        },
                        new
                        {
                            Id = new Guid("044de969-77fd-43e7-a241-a810de292e3c"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3180),
                            Description = "Medications used to increase urine production and reduce fluid retention.",
                            Name = "Diuretics",
                            Version = new Guid("19c359e3-d0cf-42bb-bbc2-a06ab005c939")
                        },
                        new
                        {
                            Id = new Guid("ccf23f9f-a2e5-4f5f-8a3b-205c27dc7461"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3183),
                            Description = "Chemical messengers that regulate various bodily functions.",
                            Name = "Hormones",
                            Version = new Guid("97c4a7e8-53e9-4a46-968e-8d92ca2976e5")
                        },
                        new
                        {
                            Id = new Guid("6f3181b3-54ff-4353-8f8a-b80636af085b"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3186),
                            Description = "Medications used to suppress the immune system, often used in transplant patients.",
                            Name = "Immunosuppressant",
                            Version = new Guid("1fe26ac5-6cc9-4c7a-a810-9f3e654dded9")
                        },
                        new
                        {
                            Id = new Guid("288b5f4c-da89-4e45-adef-77ef3eca356c"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3192),
                            Description = "Substances that promote bowel movements and relieve constipation.",
                            Name = "Laxatives",
                            Version = new Guid("5a1c5847-88b0-4cf5-b3b0-a1939a7f54ef")
                        },
                        new
                        {
                            Id = new Guid("9dc20a7d-2739-4844-8e7f-90f7ce942748"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3195),
                            Description = "Medications used to relax muscles and reduce muscle spasms.",
                            Name = "Muscle Relaxants",
                            Version = new Guid("9a8553ea-bee1-451c-8cb2-aa4054f778a6")
                        },
                        new
                        {
                            Id = new Guid("72540ff6-6945-465d-a567-4ddd7a37c16a"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3198),
                            Description = "Drugs that induce relaxation and sleepiness.",
                            Name = "Sedatives",
                            Version = new Guid("2b45948e-7d48-474b-8f9e-1aff0ca124d6")
                        },
                        new
                        {
                            Id = new Guid("0f27790a-c754-438c-92bb-a3b1d54340b4"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3201),
                            Description = "Substances that increase alertness, attention, and energy.",
                            Name = "Stimulants",
                            Version = new Guid("046ad6cd-0e00-45b4-8e6c-912bd7be32b7")
                        },
                        new
                        {
                            Id = new Guid("c67b5e61-680d-4e2a-8db4-05d5040d7b37"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3208),
                            Description = "Medications used to dissolve blood clots.",
                            Name = "Thrombolytic",
                            Version = new Guid("5406ddc4-3f6c-4329-a109-f3cafdea6755")
                        },
                        new
                        {
                            Id = new Guid("d5d4e348-060a-4a73-9462-8ca2841680a0"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3212),
                            Description = "Preparations that stimulate the immune system to protect against specific diseases.",
                            Name = "Vaccines",
                            Version = new Guid("04143c74-de2e-4849-b697-a08f57f1573d")
                        },
                        new
                        {
                            Id = new Guid("2b4f53b1-add8-4535-9ecb-682f71582cb4"),
                            CreatedDate = new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(3215),
                            Description = "Essential nutrients required for various bodily functions.",
                            Name = "Vitamins and Minerals",
                            Version = new Guid("b33892dd-0670-4bfe-ab25-fa2b8870fac6")
                        });
                });

            modelBuilder.Entity("DrugStore.Domain.IdentityAggregate.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("DrugStore.Domain.IdentityAggregate.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("full_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DrugStore.Domain.OrderAggregate.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Code")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(5157))
                        .HasColumnName("created_date");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 3, 19, 15, 53, 49, 760, DateTimeKind.Utc).AddTicks(5586))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("55bd4af7-e338-4953-a6af-54a8d8b37fc5"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_orders_customer_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("DrugStore.Domain.OrderAggregate.OrderItem", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 3, 19, 15, 53, 49, 762, DateTimeKind.Utc).AddTicks(4795))
                        .HasColumnName("created_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 3, 19, 15, 53, 49, 762, DateTimeKind.Utc).AddTicks(5254))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("f8928b77-58fd-4bb3-8a98-ee3a6348d937"))
                        .HasColumnName("version");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("pk_order_details");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_details_product_id");

                    b.ToTable("order_details", (string)null);
                });

            modelBuilder.Entity("DrugStore.Domain.ProductAggregate.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 3, 19, 15, 53, 49, 764, DateTimeKind.Utc).AddTicks(8399))
                        .HasColumnName("created_date");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("detail");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("product_code");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("quantity");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 3, 19, 15, 53, 49, 764, DateTimeKind.Utc).AddTicks(8902))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("b1758b8b-491d-41bc-822b-7a177175f684"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<DrugStore.Domain.IdentityAggregate.Primitives.IdentityId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("role_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<DrugStore.Domain.IdentityAggregate.Primitives.IdentityId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<DrugStore.Domain.IdentityAggregate.Primitives.IdentityId>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<DrugStore.Domain.IdentityAggregate.Primitives.IdentityId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("role_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<DrugStore.Domain.IdentityAggregate.Primitives.IdentityId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DrugStore.Domain.IdentityAggregate.ApplicationUser", b =>
                {
                    b.OwnsOne("DrugStore.Domain.IdentityAggregate.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ApplicationUserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Province")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("AspNetUsers");

                            b1.ToJson("address");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DrugStore.Domain.OrderAggregate.Order", b =>
                {
                    b.HasOne("DrugStore.Domain.IdentityAggregate.ApplicationUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_orders_asp_net_users_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DrugStore.Domain.OrderAggregate.OrderItem", b =>
                {
                    b.HasOne("DrugStore.Domain.OrderAggregate.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_details_orders_order_id");

                    b.HasOne("DrugStore.Domain.ProductAggregate.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_order_details_products_product_id");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DrugStore.Domain.ProductAggregate.Product", b =>
                {
                    b.HasOne("DrugStore.Domain.CategoryAggregate.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_products_categories_category_id");

                    b.OwnsOne("DrugStore.Domain.ProductAggregate.ValueObjects.ProductImage", "Image", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Alt")
                                .HasColumnType("text");

                            b1.Property<string>("ImageUrl")
                                .HasColumnType("text");

                            b1.Property<string>("Title")
                                .HasColumnType("text");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.ToJson("image");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("DrugStore.Domain.ProductAggregate.ValueObjects.ProductPrice", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("PriceSale")
                                .HasColumnType("numeric");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.ToJson("price");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<DrugStore.Domain.IdentityAggregate.Primitives.IdentityId>", b =>
                {
                    b.HasOne("DrugStore.Domain.IdentityAggregate.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<DrugStore.Domain.IdentityAggregate.Primitives.IdentityId>", b =>
                {
                    b.HasOne("DrugStore.Domain.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<DrugStore.Domain.IdentityAggregate.Primitives.IdentityId>", b =>
                {
                    b.HasOne("DrugStore.Domain.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<DrugStore.Domain.IdentityAggregate.Primitives.IdentityId>", b =>
                {
                    b.HasOne("DrugStore.Domain.IdentityAggregate.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("DrugStore.Domain.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<DrugStore.Domain.IdentityAggregate.Primitives.IdentityId>", b =>
                {
                    b.HasOne("DrugStore.Domain.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("DrugStore.Domain.CategoryAggregate.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DrugStore.Domain.IdentityAggregate.ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DrugStore.Domain.OrderAggregate.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DrugStore.Domain.ProductAggregate.Product", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
