// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace DrugStore.Persistence.CompiledModels
{
    public partial class ApplicationDbContextModel
    {
        partial void Initialize()
        {
            var category = CategoryEntityType.Create(this);
            var news = NewsEntityType.Create(this);
            var post = PostEntityType.Create(this);
            var applicationRole = ApplicationRoleEntityType.Create(this);
            var applicationUser = ApplicationUserEntityType.Create(this);
            var order = OrderEntityType.Create(this);
            var orderItem = OrderItemEntityType.Create(this);
            var product = ProductEntityType.Create(this);
            var productImage = ProductImageEntityType.Create(this);
            var identityRoleClaim = IdentityRoleClaimEntityType.Create(this);
            var identityUserClaim = IdentityUserClaimEntityType.Create(this);
            var identityUserLogin = IdentityUserLoginEntityType.Create(this);
            var identityUserRole = IdentityUserRoleEntityType.Create(this);
            var identityUserToken = IdentityUserTokenEntityType.Create(this);

            NewsEntityType.CreateForeignKey1(news, category);
            PostEntityType.CreateForeignKey1(post, category);
            OrderEntityType.CreateForeignKey1(order, applicationUser);
            OrderItemEntityType.CreateForeignKey1(orderItem, order);
            OrderItemEntityType.CreateForeignKey2(orderItem, product);
            ProductEntityType.CreateForeignKey1(product, category);
            ProductImageEntityType.CreateForeignKey1(productImage, product);
            IdentityRoleClaimEntityType.CreateForeignKey1(identityRoleClaim, applicationRole);
            IdentityUserClaimEntityType.CreateForeignKey1(identityUserClaim, applicationUser);
            IdentityUserLoginEntityType.CreateForeignKey1(identityUserLogin, applicationUser);
            IdentityUserRoleEntityType.CreateForeignKey1(identityUserRole, applicationRole);
            IdentityUserRoleEntityType.CreateForeignKey2(identityUserRole, applicationUser);
            IdentityUserTokenEntityType.CreateForeignKey1(identityUserToken, applicationUser);

            CategoryEntityType.CreateAnnotations(category);
            NewsEntityType.CreateAnnotations(news);
            PostEntityType.CreateAnnotations(post);
            ApplicationRoleEntityType.CreateAnnotations(applicationRole);
            ApplicationUserEntityType.CreateAnnotations(applicationUser);
            OrderEntityType.CreateAnnotations(order);
            OrderItemEntityType.CreateAnnotations(orderItem);
            ProductEntityType.CreateAnnotations(product);
            ProductImageEntityType.CreateAnnotations(productImage);
            IdentityRoleClaimEntityType.CreateAnnotations(identityRoleClaim);
            IdentityUserClaimEntityType.CreateAnnotations(identityUserClaim);
            IdentityUserLoginEntityType.CreateAnnotations(identityUserLogin);
            IdentityUserRoleEntityType.CreateAnnotations(identityUserRole);
            IdentityUserTokenEntityType.CreateAnnotations(identityUserToken);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.2");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var category = FindEntityType("DrugStore.Domain.CategoryAggregate.Category")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            category.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var drugStoreDomainCategoryAggregateCategoryTableBase = new TableBase("DrugStore.Domain.CategoryAggregate.Category", null, relationalModel);
            var created_dateColumnBase = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", drugStoreDomainCategoryAggregateCategoryTableBase);
            drugStoreDomainCategoryAggregateCategoryTableBase.Columns.Add("created_date", created_dateColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "uuid", drugStoreDomainCategoryAggregateCategoryTableBase);
            drugStoreDomainCategoryAggregateCategoryTableBase.Columns.Add("id", idColumnBase);
            var linkColumnBase = new ColumnBase<ColumnMappingBase>("link", "character varying(100)", drugStoreDomainCategoryAggregateCategoryTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainCategoryAggregateCategoryTableBase.Columns.Add("link", linkColumnBase);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("title", "character varying(50)", drugStoreDomainCategoryAggregateCategoryTableBase);
            drugStoreDomainCategoryAggregateCategoryTableBase.Columns.Add("title", titleColumnBase);
            var update_dateColumnBase = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", drugStoreDomainCategoryAggregateCategoryTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainCategoryAggregateCategoryTableBase.Columns.Add("update_date", update_dateColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("version", "uuid", drugStoreDomainCategoryAggregateCategoryTableBase);
            drugStoreDomainCategoryAggregateCategoryTableBase.Columns.Add("version", versionColumnBase);
            relationalModel.DefaultTables.Add("DrugStore.Domain.CategoryAggregate.Category", drugStoreDomainCategoryAggregateCategoryTableBase);
            var drugStoreDomainCategoryAggregateCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(category, drugStoreDomainCategoryAggregateCategoryTableBase, true);
            drugStoreDomainCategoryAggregateCategoryTableBase.AddTypeMapping(drugStoreDomainCategoryAggregateCategoryMappingBase, false);
            defaultTableMappings.Add(drugStoreDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, category.FindProperty("Id")!, drugStoreDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase, category.FindProperty("CreatedDate")!, drugStoreDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)linkColumnBase, category.FindProperty("Link")!, drugStoreDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, category.FindProperty("Title")!, drugStoreDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase, category.FindProperty("UpdateDate")!, drugStoreDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, category.FindProperty("Version")!, drugStoreDomainCategoryAggregateCategoryMappingBase);

            var tableMappings = new List<TableMapping>();
            category.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var categoriesTable = new Table("categories", null, relationalModel);
            var idColumn = new Column("id", "uuid", categoriesTable);
            categoriesTable.Columns.Add("id", idColumn);
            var created_dateColumn = new Column("created_date", "timestamp with time zone", categoriesTable);
            categoriesTable.Columns.Add("created_date", created_dateColumn);
            var linkColumn = new Column("link", "character varying(100)", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("link", linkColumn);
            var titleColumn = new Column("title", "character varying(50)", categoriesTable);
            categoriesTable.Columns.Add("title", titleColumn);
            var update_dateColumn = new Column("update_date", "timestamp with time zone", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("update_date", update_dateColumn);
            var versionColumn = new Column("version", "uuid", categoriesTable);
            categoriesTable.Columns.Add("version", versionColumn);
            var pk_categories = new UniqueConstraint("pk_categories", categoriesTable, new[] { idColumn });
            categoriesTable.PrimaryKey = pk_categories;
            var pk_categoriesUc = RelationalModel.GetKey(this,
                "DrugStore.Domain.CategoryAggregate.Category",
                new[] { "Id" });
            pk_categories.MappedKeys.Add(pk_categoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_categoriesUc).Add(pk_categories);
            categoriesTable.UniqueConstraints.Add("pk_categories", pk_categories);
            relationalModel.Tables.Add(("categories", null), categoriesTable);
            var categoriesTableMapping = new TableMapping(category, categoriesTable, true);
            categoriesTable.AddTypeMapping(categoriesTableMapping, false);
            tableMappings.Add(categoriesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, category.FindProperty("Id")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn, category.FindProperty("CreatedDate")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(linkColumn, category.FindProperty("Link")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, category.FindProperty("Title")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn, category.FindProperty("UpdateDate")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, category.FindProperty("Version")!, categoriesTableMapping);

            var news = FindEntityType("DrugStore.Domain.CategoryAggregate.News")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            news.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var drugStoreDomainCategoryAggregateNewsTableBase = new TableBase("DrugStore.Domain.CategoryAggregate.News", null, relationalModel);
            var category_idColumnBase = new ColumnBase<ColumnMappingBase>("category_id", "uuid", drugStoreDomainCategoryAggregateNewsTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainCategoryAggregateNewsTableBase.Columns.Add("category_id", category_idColumnBase);
            var created_dateColumnBase0 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", drugStoreDomainCategoryAggregateNewsTableBase);
            drugStoreDomainCategoryAggregateNewsTableBase.Columns.Add("created_date", created_dateColumnBase0);
            var detailColumnBase = new ColumnBase<ColumnMappingBase>("detail", "character varying(500)", drugStoreDomainCategoryAggregateNewsTableBase);
            drugStoreDomainCategoryAggregateNewsTableBase.Columns.Add("detail", detailColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "uuid", drugStoreDomainCategoryAggregateNewsTableBase);
            drugStoreDomainCategoryAggregateNewsTableBase.Columns.Add("id", idColumnBase0);
            var imageColumnBase = new ColumnBase<ColumnMappingBase>("image", "character varying(100)", drugStoreDomainCategoryAggregateNewsTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainCategoryAggregateNewsTableBase.Columns.Add("image", imageColumnBase);
            var titleColumnBase0 = new ColumnBase<ColumnMappingBase>("title", "character varying(50)", drugStoreDomainCategoryAggregateNewsTableBase);
            drugStoreDomainCategoryAggregateNewsTableBase.Columns.Add("title", titleColumnBase0);
            var update_dateColumnBase0 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", drugStoreDomainCategoryAggregateNewsTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainCategoryAggregateNewsTableBase.Columns.Add("update_date", update_dateColumnBase0);
            var versionColumnBase0 = new ColumnBase<ColumnMappingBase>("version", "uuid", drugStoreDomainCategoryAggregateNewsTableBase);
            drugStoreDomainCategoryAggregateNewsTableBase.Columns.Add("version", versionColumnBase0);
            relationalModel.DefaultTables.Add("DrugStore.Domain.CategoryAggregate.News", drugStoreDomainCategoryAggregateNewsTableBase);
            var drugStoreDomainCategoryAggregateNewsMappingBase = new TableMappingBase<ColumnMappingBase>(news, drugStoreDomainCategoryAggregateNewsTableBase, true);
            drugStoreDomainCategoryAggregateNewsTableBase.AddTypeMapping(drugStoreDomainCategoryAggregateNewsMappingBase, false);
            defaultTableMappings0.Add(drugStoreDomainCategoryAggregateNewsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, news.FindProperty("Id")!, drugStoreDomainCategoryAggregateNewsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)category_idColumnBase, news.FindProperty("CategoryId")!, drugStoreDomainCategoryAggregateNewsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase0, news.FindProperty("CreatedDate")!, drugStoreDomainCategoryAggregateNewsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)detailColumnBase, news.FindProperty("Detail")!, drugStoreDomainCategoryAggregateNewsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imageColumnBase, news.FindProperty("Image")!, drugStoreDomainCategoryAggregateNewsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase0, news.FindProperty("Title")!, drugStoreDomainCategoryAggregateNewsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase0, news.FindProperty("UpdateDate")!, drugStoreDomainCategoryAggregateNewsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase0, news.FindProperty("Version")!, drugStoreDomainCategoryAggregateNewsMappingBase);

            var tableMappings0 = new List<TableMapping>();
            news.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var newsTable = new Table("news", null, relationalModel);
            var idColumn0 = new Column("id", "uuid", newsTable);
            newsTable.Columns.Add("id", idColumn0);
            var category_idColumn = new Column("category_id", "uuid", newsTable)
            {
                IsNullable = true
            };
            newsTable.Columns.Add("category_id", category_idColumn);
            var created_dateColumn0 = new Column("created_date", "timestamp with time zone", newsTable);
            newsTable.Columns.Add("created_date", created_dateColumn0);
            var detailColumn = new Column("detail", "character varying(500)", newsTable);
            newsTable.Columns.Add("detail", detailColumn);
            var imageColumn = new Column("image", "character varying(100)", newsTable)
            {
                IsNullable = true
            };
            newsTable.Columns.Add("image", imageColumn);
            var titleColumn0 = new Column("title", "character varying(50)", newsTable);
            newsTable.Columns.Add("title", titleColumn0);
            var update_dateColumn0 = new Column("update_date", "timestamp with time zone", newsTable)
            {
                IsNullable = true
            };
            newsTable.Columns.Add("update_date", update_dateColumn0);
            var versionColumn0 = new Column("version", "uuid", newsTable);
            newsTable.Columns.Add("version", versionColumn0);
            var pk_news = new UniqueConstraint("pk_news", newsTable, new[] { idColumn0 });
            newsTable.PrimaryKey = pk_news;
            var pk_newsUc = RelationalModel.GetKey(this,
                "DrugStore.Domain.CategoryAggregate.News",
                new[] { "Id" });
            pk_news.MappedKeys.Add(pk_newsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_newsUc).Add(pk_news);
            newsTable.UniqueConstraints.Add("pk_news", pk_news);
            var ix_news_category_id = new TableIndex(
            "ix_news_category_id", newsTable, new[] { category_idColumn }, false);
            var ix_news_category_idIx = RelationalModel.GetIndex(this,
                "DrugStore.Domain.CategoryAggregate.News",
                new[] { "CategoryId" });
            ix_news_category_id.MappedIndexes.Add(ix_news_category_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_news_category_idIx).Add(ix_news_category_id);
            newsTable.Indexes.Add("ix_news_category_id", ix_news_category_id);
            relationalModel.Tables.Add(("news", null), newsTable);
            var newsTableMapping = new TableMapping(news, newsTable, true);
            newsTable.AddTypeMapping(newsTableMapping, false);
            tableMappings0.Add(newsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, news.FindProperty("Id")!, newsTableMapping);
            RelationalModel.CreateColumnMapping(category_idColumn, news.FindProperty("CategoryId")!, newsTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn0, news.FindProperty("CreatedDate")!, newsTableMapping);
            RelationalModel.CreateColumnMapping(detailColumn, news.FindProperty("Detail")!, newsTableMapping);
            RelationalModel.CreateColumnMapping(imageColumn, news.FindProperty("Image")!, newsTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn0, news.FindProperty("Title")!, newsTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn0, news.FindProperty("UpdateDate")!, newsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn0, news.FindProperty("Version")!, newsTableMapping);

            var post = FindEntityType("DrugStore.Domain.CategoryAggregate.Post")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            post.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var drugStoreDomainCategoryAggregatePostTableBase = new TableBase("DrugStore.Domain.CategoryAggregate.Post", null, relationalModel);
            var category_idColumnBase0 = new ColumnBase<ColumnMappingBase>("category_id", "uuid", drugStoreDomainCategoryAggregatePostTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainCategoryAggregatePostTableBase.Columns.Add("category_id", category_idColumnBase0);
            var created_dateColumnBase1 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", drugStoreDomainCategoryAggregatePostTableBase);
            drugStoreDomainCategoryAggregatePostTableBase.Columns.Add("created_date", created_dateColumnBase1);
            var detailColumnBase0 = new ColumnBase<ColumnMappingBase>("detail", "character varying(500)", drugStoreDomainCategoryAggregatePostTableBase);
            drugStoreDomainCategoryAggregatePostTableBase.Columns.Add("detail", detailColumnBase0);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("id", "uuid", drugStoreDomainCategoryAggregatePostTableBase);
            drugStoreDomainCategoryAggregatePostTableBase.Columns.Add("id", idColumnBase1);
            var imageColumnBase0 = new ColumnBase<ColumnMappingBase>("image", "character varying(100)", drugStoreDomainCategoryAggregatePostTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainCategoryAggregatePostTableBase.Columns.Add("image", imageColumnBase0);
            var titleColumnBase1 = new ColumnBase<ColumnMappingBase>("title", "character varying(50)", drugStoreDomainCategoryAggregatePostTableBase);
            drugStoreDomainCategoryAggregatePostTableBase.Columns.Add("title", titleColumnBase1);
            var update_dateColumnBase1 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", drugStoreDomainCategoryAggregatePostTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainCategoryAggregatePostTableBase.Columns.Add("update_date", update_dateColumnBase1);
            var versionColumnBase1 = new ColumnBase<ColumnMappingBase>("version", "uuid", drugStoreDomainCategoryAggregatePostTableBase);
            drugStoreDomainCategoryAggregatePostTableBase.Columns.Add("version", versionColumnBase1);
            relationalModel.DefaultTables.Add("DrugStore.Domain.CategoryAggregate.Post", drugStoreDomainCategoryAggregatePostTableBase);
            var drugStoreDomainCategoryAggregatePostMappingBase = new TableMappingBase<ColumnMappingBase>(post, drugStoreDomainCategoryAggregatePostTableBase, true);
            drugStoreDomainCategoryAggregatePostTableBase.AddTypeMapping(drugStoreDomainCategoryAggregatePostMappingBase, false);
            defaultTableMappings1.Add(drugStoreDomainCategoryAggregatePostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, post.FindProperty("Id")!, drugStoreDomainCategoryAggregatePostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)category_idColumnBase0, post.FindProperty("CategoryId")!, drugStoreDomainCategoryAggregatePostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase1, post.FindProperty("CreatedDate")!, drugStoreDomainCategoryAggregatePostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)detailColumnBase0, post.FindProperty("Detail")!, drugStoreDomainCategoryAggregatePostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imageColumnBase0, post.FindProperty("Image")!, drugStoreDomainCategoryAggregatePostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase1, post.FindProperty("Title")!, drugStoreDomainCategoryAggregatePostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase1, post.FindProperty("UpdateDate")!, drugStoreDomainCategoryAggregatePostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase1, post.FindProperty("Version")!, drugStoreDomainCategoryAggregatePostMappingBase);

            var tableMappings1 = new List<TableMapping>();
            post.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var postsTable = new Table("posts", null, relationalModel);
            var idColumn1 = new Column("id", "uuid", postsTable);
            postsTable.Columns.Add("id", idColumn1);
            var category_idColumn0 = new Column("category_id", "uuid", postsTable)
            {
                IsNullable = true
            };
            postsTable.Columns.Add("category_id", category_idColumn0);
            var created_dateColumn1 = new Column("created_date", "timestamp with time zone", postsTable);
            postsTable.Columns.Add("created_date", created_dateColumn1);
            var detailColumn0 = new Column("detail", "character varying(500)", postsTable);
            postsTable.Columns.Add("detail", detailColumn0);
            var imageColumn0 = new Column("image", "character varying(100)", postsTable)
            {
                IsNullable = true
            };
            postsTable.Columns.Add("image", imageColumn0);
            var titleColumn1 = new Column("title", "character varying(50)", postsTable);
            postsTable.Columns.Add("title", titleColumn1);
            var update_dateColumn1 = new Column("update_date", "timestamp with time zone", postsTable)
            {
                IsNullable = true
            };
            postsTable.Columns.Add("update_date", update_dateColumn1);
            var versionColumn1 = new Column("version", "uuid", postsTable);
            postsTable.Columns.Add("version", versionColumn1);
            var pk_posts = new UniqueConstraint("pk_posts", postsTable, new[] { idColumn1 });
            postsTable.PrimaryKey = pk_posts;
            var pk_postsUc = RelationalModel.GetKey(this,
                "DrugStore.Domain.CategoryAggregate.Post",
                new[] { "Id" });
            pk_posts.MappedKeys.Add(pk_postsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_postsUc).Add(pk_posts);
            postsTable.UniqueConstraints.Add("pk_posts", pk_posts);
            var ix_posts_category_id = new TableIndex(
            "ix_posts_category_id", postsTable, new[] { category_idColumn0 }, false);
            var ix_posts_category_idIx = RelationalModel.GetIndex(this,
                "DrugStore.Domain.CategoryAggregate.Post",
                new[] { "CategoryId" });
            ix_posts_category_id.MappedIndexes.Add(ix_posts_category_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_posts_category_idIx).Add(ix_posts_category_id);
            postsTable.Indexes.Add("ix_posts_category_id", ix_posts_category_id);
            relationalModel.Tables.Add(("posts", null), postsTable);
            var postsTableMapping = new TableMapping(post, postsTable, true);
            postsTable.AddTypeMapping(postsTableMapping, false);
            tableMappings1.Add(postsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, post.FindProperty("Id")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(category_idColumn0, post.FindProperty("CategoryId")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn1, post.FindProperty("CreatedDate")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(detailColumn0, post.FindProperty("Detail")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(imageColumn0, post.FindProperty("Image")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn1, post.FindProperty("Title")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn1, post.FindProperty("UpdateDate")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn1, post.FindProperty("Version")!, postsTableMapping);

            var applicationRole = FindEntityType("DrugStore.Domain.IdentityAggregate.ApplicationRole")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            applicationRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var drugStoreDomainIdentityAggregateApplicationRoleTableBase = new TableBase("DrugStore.Domain.IdentityAggregate.ApplicationRole", null, relationalModel);
            var concurrency_stampColumnBase = new ColumnBase<ColumnMappingBase>("concurrency_stamp", "text", drugStoreDomainIdentityAggregateApplicationRoleTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainIdentityAggregateApplicationRoleTableBase.Columns.Add("concurrency_stamp", concurrency_stampColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("id", "uuid", drugStoreDomainIdentityAggregateApplicationRoleTableBase);
            drugStoreDomainIdentityAggregateApplicationRoleTableBase.Columns.Add("id", idColumnBase2);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "character varying(256)", drugStoreDomainIdentityAggregateApplicationRoleTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainIdentityAggregateApplicationRoleTableBase.Columns.Add("name", nameColumnBase);
            var normalized_nameColumnBase = new ColumnBase<ColumnMappingBase>("normalized_name", "character varying(256)", drugStoreDomainIdentityAggregateApplicationRoleTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainIdentityAggregateApplicationRoleTableBase.Columns.Add("normalized_name", normalized_nameColumnBase);
            relationalModel.DefaultTables.Add("DrugStore.Domain.IdentityAggregate.ApplicationRole", drugStoreDomainIdentityAggregateApplicationRoleTableBase);
            var drugStoreDomainIdentityAggregateApplicationRoleMappingBase = new TableMappingBase<ColumnMappingBase>(applicationRole, drugStoreDomainIdentityAggregateApplicationRoleTableBase, true);
            drugStoreDomainIdentityAggregateApplicationRoleTableBase.AddTypeMapping(drugStoreDomainIdentityAggregateApplicationRoleMappingBase, false);
            defaultTableMappings2.Add(drugStoreDomainIdentityAggregateApplicationRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, applicationRole.FindProperty("Id")!, drugStoreDomainIdentityAggregateApplicationRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrency_stampColumnBase, applicationRole.FindProperty("ConcurrencyStamp")!, drugStoreDomainIdentityAggregateApplicationRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, applicationRole.FindProperty("Name")!, drugStoreDomainIdentityAggregateApplicationRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalized_nameColumnBase, applicationRole.FindProperty("NormalizedName")!, drugStoreDomainIdentityAggregateApplicationRoleMappingBase);

            var tableMappings2 = new List<TableMapping>();
            applicationRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var aspNetRolesTable = new Table("AspNetRoles", null, relationalModel);
            var idColumn2 = new Column("id", "uuid", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("id", idColumn2);
            var concurrency_stampColumn = new Column("concurrency_stamp", "text", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("concurrency_stamp", concurrency_stampColumn);
            var nameColumn = new Column("name", "character varying(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("name", nameColumn);
            var normalized_nameColumn = new Column("normalized_name", "character varying(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("normalized_name", normalized_nameColumn);
            var pk_asp_net_roles = new UniqueConstraint("pk_asp_net_roles", aspNetRolesTable, new[] { idColumn2 });
            aspNetRolesTable.PrimaryKey = pk_asp_net_roles;
            var pk_asp_net_rolesUc = RelationalModel.GetKey(this,
                "DrugStore.Domain.IdentityAggregate.ApplicationRole",
                new[] { "Id" });
            pk_asp_net_roles.MappedKeys.Add(pk_asp_net_rolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_rolesUc).Add(pk_asp_net_roles);
            aspNetRolesTable.UniqueConstraints.Add("pk_asp_net_roles", pk_asp_net_roles);
            var roleNameIndex = new TableIndex(
            "RoleNameIndex", aspNetRolesTable, new[] { normalized_nameColumn }, true);
            var roleNameIndexIx = RelationalModel.GetIndex(this,
                "DrugStore.Domain.IdentityAggregate.ApplicationRole",
                new[] { "NormalizedName" });
            roleNameIndex.MappedIndexes.Add(roleNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(roleNameIndexIx).Add(roleNameIndex);
            aspNetRolesTable.Indexes.Add("RoleNameIndex", roleNameIndex);
            relationalModel.Tables.Add(("AspNetRoles", null), aspNetRolesTable);
            var aspNetRolesTableMapping = new TableMapping(applicationRole, aspNetRolesTable, true);
            aspNetRolesTable.AddTypeMapping(aspNetRolesTableMapping, false);
            tableMappings2.Add(aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, applicationRole.FindProperty("Id")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(concurrency_stampColumn, applicationRole.FindProperty("ConcurrencyStamp")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, applicationRole.FindProperty("Name")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(normalized_nameColumn, applicationRole.FindProperty("NormalizedName")!, aspNetRolesTableMapping);

            var applicationUser = FindEntityType("DrugStore.Domain.IdentityAggregate.ApplicationUser")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            applicationUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var drugStoreDomainIdentityAggregateApplicationUserTableBase = new TableBase("DrugStore.Domain.IdentityAggregate.ApplicationUser", null, relationalModel);
            var access_failed_countColumnBase = new ColumnBase<ColumnMappingBase>("access_failed_count", "integer", drugStoreDomainIdentityAggregateApplicationUserTableBase);
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("access_failed_count", access_failed_countColumnBase);
            var addressColumnBase = new ColumnBase<ColumnMappingBase>("address", "jsonb", drugStoreDomainIdentityAggregateApplicationUserTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("address", addressColumnBase);
            var concurrency_stampColumnBase0 = new ColumnBase<ColumnMappingBase>("concurrency_stamp", "text", drugStoreDomainIdentityAggregateApplicationUserTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("concurrency_stamp", concurrency_stampColumnBase0);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("email", "character varying(256)", drugStoreDomainIdentityAggregateApplicationUserTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("email", emailColumnBase);
            var email_confirmedColumnBase = new ColumnBase<ColumnMappingBase>("email_confirmed", "boolean", drugStoreDomainIdentityAggregateApplicationUserTableBase);
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("email_confirmed", email_confirmedColumnBase);
            var full_nameColumnBase = new ColumnBase<ColumnMappingBase>("full_name", "character varying(50)", drugStoreDomainIdentityAggregateApplicationUserTableBase);
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("full_name", full_nameColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("id", "uuid", drugStoreDomainIdentityAggregateApplicationUserTableBase);
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("id", idColumnBase3);
            var lockout_enabledColumnBase = new ColumnBase<ColumnMappingBase>("lockout_enabled", "boolean", drugStoreDomainIdentityAggregateApplicationUserTableBase);
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("lockout_enabled", lockout_enabledColumnBase);
            var lockout_endColumnBase = new ColumnBase<ColumnMappingBase>("lockout_end", "timestamp with time zone", drugStoreDomainIdentityAggregateApplicationUserTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("lockout_end", lockout_endColumnBase);
            var normalized_emailColumnBase = new ColumnBase<ColumnMappingBase>("normalized_email", "character varying(256)", drugStoreDomainIdentityAggregateApplicationUserTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("normalized_email", normalized_emailColumnBase);
            var normalized_user_nameColumnBase = new ColumnBase<ColumnMappingBase>("normalized_user_name", "character varying(256)", drugStoreDomainIdentityAggregateApplicationUserTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("normalized_user_name", normalized_user_nameColumnBase);
            var password_hashColumnBase = new ColumnBase<ColumnMappingBase>("password_hash", "text", drugStoreDomainIdentityAggregateApplicationUserTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("password_hash", password_hashColumnBase);
            var phone_numberColumnBase = new ColumnBase<ColumnMappingBase>("phone_number", "character varying(10)", drugStoreDomainIdentityAggregateApplicationUserTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("phone_number", phone_numberColumnBase);
            var phone_number_confirmedColumnBase = new ColumnBase<ColumnMappingBase>("phone_number_confirmed", "boolean", drugStoreDomainIdentityAggregateApplicationUserTableBase);
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("phone_number_confirmed", phone_number_confirmedColumnBase);
            var security_stampColumnBase = new ColumnBase<ColumnMappingBase>("security_stamp", "text", drugStoreDomainIdentityAggregateApplicationUserTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("security_stamp", security_stampColumnBase);
            var two_factor_enabledColumnBase = new ColumnBase<ColumnMappingBase>("two_factor_enabled", "boolean", drugStoreDomainIdentityAggregateApplicationUserTableBase);
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("two_factor_enabled", two_factor_enabledColumnBase);
            var user_nameColumnBase = new ColumnBase<ColumnMappingBase>("user_name", "character varying(256)", drugStoreDomainIdentityAggregateApplicationUserTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainIdentityAggregateApplicationUserTableBase.Columns.Add("user_name", user_nameColumnBase);
            relationalModel.DefaultTables.Add("DrugStore.Domain.IdentityAggregate.ApplicationUser", drugStoreDomainIdentityAggregateApplicationUserTableBase);
            var drugStoreDomainIdentityAggregateApplicationUserMappingBase = new TableMappingBase<ColumnMappingBase>(applicationUser, drugStoreDomainIdentityAggregateApplicationUserTableBase, true);
            drugStoreDomainIdentityAggregateApplicationUserTableBase.AddTypeMapping(drugStoreDomainIdentityAggregateApplicationUserMappingBase, false);
            defaultTableMappings3.Add(drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, applicationUser.FindProperty("Id")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)access_failed_countColumnBase, applicationUser.FindProperty("AccessFailedCount")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)addressColumnBase, applicationUser.FindProperty("Address")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrency_stampColumnBase0, applicationUser.FindProperty("ConcurrencyStamp")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, applicationUser.FindProperty("Email")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)email_confirmedColumnBase, applicationUser.FindProperty("EmailConfirmed")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)full_nameColumnBase, applicationUser.FindProperty("FullName")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockout_enabledColumnBase, applicationUser.FindProperty("LockoutEnabled")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockout_endColumnBase, applicationUser.FindProperty("LockoutEnd")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalized_emailColumnBase, applicationUser.FindProperty("NormalizedEmail")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalized_user_nameColumnBase, applicationUser.FindProperty("NormalizedUserName")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)password_hashColumnBase, applicationUser.FindProperty("PasswordHash")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phone_numberColumnBase, applicationUser.FindProperty("PhoneNumber")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phone_number_confirmedColumnBase, applicationUser.FindProperty("PhoneNumberConfirmed")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)security_stampColumnBase, applicationUser.FindProperty("SecurityStamp")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)two_factor_enabledColumnBase, applicationUser.FindProperty("TwoFactorEnabled")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_nameColumnBase, applicationUser.FindProperty("UserName")!, drugStoreDomainIdentityAggregateApplicationUserMappingBase);

            var tableMappings3 = new List<TableMapping>();
            applicationUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var aspNetUsersTable = new Table("AspNetUsers", null, relationalModel);
            var idColumn3 = new Column("id", "uuid", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("id", idColumn3);
            var access_failed_countColumn = new Column("access_failed_count", "integer", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("access_failed_count", access_failed_countColumn);
            var addressColumn = new Column("address", "jsonb", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("address", addressColumn);
            var concurrency_stampColumn0 = new Column("concurrency_stamp", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("concurrency_stamp", concurrency_stampColumn0);
            var emailColumn = new Column("email", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("email", emailColumn);
            var email_confirmedColumn = new Column("email_confirmed", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("email_confirmed", email_confirmedColumn);
            var full_nameColumn = new Column("full_name", "character varying(50)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("full_name", full_nameColumn);
            var lockout_enabledColumn = new Column("lockout_enabled", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("lockout_enabled", lockout_enabledColumn);
            var lockout_endColumn = new Column("lockout_end", "timestamp with time zone", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("lockout_end", lockout_endColumn);
            var normalized_emailColumn = new Column("normalized_email", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("normalized_email", normalized_emailColumn);
            var normalized_user_nameColumn = new Column("normalized_user_name", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("normalized_user_name", normalized_user_nameColumn);
            var password_hashColumn = new Column("password_hash", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("password_hash", password_hashColumn);
            var phone_numberColumn = new Column("phone_number", "character varying(10)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("phone_number", phone_numberColumn);
            var phone_number_confirmedColumn = new Column("phone_number_confirmed", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("phone_number_confirmed", phone_number_confirmedColumn);
            var security_stampColumn = new Column("security_stamp", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("security_stamp", security_stampColumn);
            var two_factor_enabledColumn = new Column("two_factor_enabled", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("two_factor_enabled", two_factor_enabledColumn);
            var user_nameColumn = new Column("user_name", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("user_name", user_nameColumn);
            var pk_asp_net_users = new UniqueConstraint("pk_asp_net_users", aspNetUsersTable, new[] { idColumn3 });
            aspNetUsersTable.PrimaryKey = pk_asp_net_users;
            var pk_asp_net_usersUc = RelationalModel.GetKey(this,
                "DrugStore.Domain.IdentityAggregate.ApplicationUser",
                new[] { "Id" });
            pk_asp_net_users.MappedKeys.Add(pk_asp_net_usersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_usersUc).Add(pk_asp_net_users);
            aspNetUsersTable.UniqueConstraints.Add("pk_asp_net_users", pk_asp_net_users);
            var emailIndex = new TableIndex(
            "EmailIndex", aspNetUsersTable, new[] { normalized_emailColumn }, false);
            var emailIndexIx = RelationalModel.GetIndex(this,
                "DrugStore.Domain.IdentityAggregate.ApplicationUser",
                new[] { "NormalizedEmail" });
            emailIndex.MappedIndexes.Add(emailIndexIx);
            RelationalModel.GetOrCreateTableIndexes(emailIndexIx).Add(emailIndex);
            aspNetUsersTable.Indexes.Add("EmailIndex", emailIndex);
            var userNameIndex = new TableIndex(
            "UserNameIndex", aspNetUsersTable, new[] { normalized_user_nameColumn }, true);
            var userNameIndexIx = RelationalModel.GetIndex(this,
                "DrugStore.Domain.IdentityAggregate.ApplicationUser",
                new[] { "NormalizedUserName" });
            userNameIndex.MappedIndexes.Add(userNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(userNameIndexIx).Add(userNameIndex);
            aspNetUsersTable.Indexes.Add("UserNameIndex", userNameIndex);
            relationalModel.Tables.Add(("AspNetUsers", null), aspNetUsersTable);
            var aspNetUsersTableMapping = new TableMapping(applicationUser, aspNetUsersTable, true);
            aspNetUsersTable.AddTypeMapping(aspNetUsersTableMapping, false);
            tableMappings3.Add(aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, applicationUser.FindProperty("Id")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(access_failed_countColumn, applicationUser.FindProperty("AccessFailedCount")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(addressColumn, applicationUser.FindProperty("Address")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(concurrency_stampColumn0, applicationUser.FindProperty("ConcurrencyStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, applicationUser.FindProperty("Email")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(email_confirmedColumn, applicationUser.FindProperty("EmailConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(full_nameColumn, applicationUser.FindProperty("FullName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockout_enabledColumn, applicationUser.FindProperty("LockoutEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockout_endColumn, applicationUser.FindProperty("LockoutEnd")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalized_emailColumn, applicationUser.FindProperty("NormalizedEmail")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalized_user_nameColumn, applicationUser.FindProperty("NormalizedUserName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(password_hashColumn, applicationUser.FindProperty("PasswordHash")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phone_numberColumn, applicationUser.FindProperty("PhoneNumber")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phone_number_confirmedColumn, applicationUser.FindProperty("PhoneNumberConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(security_stampColumn, applicationUser.FindProperty("SecurityStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(two_factor_enabledColumn, applicationUser.FindProperty("TwoFactorEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(user_nameColumn, applicationUser.FindProperty("UserName")!, aspNetUsersTableMapping);

            var order = FindEntityType("DrugStore.Domain.OrderAggregate.Order")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            order.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var drugStoreDomainOrderAggregateOrderTableBase = new TableBase("DrugStore.Domain.OrderAggregate.Order", null, relationalModel);
            var codeColumnBase = new ColumnBase<ColumnMappingBase>("code", "character varying(20)", drugStoreDomainOrderAggregateOrderTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainOrderAggregateOrderTableBase.Columns.Add("code", codeColumnBase);
            var created_dateColumnBase2 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", drugStoreDomainOrderAggregateOrderTableBase);
            drugStoreDomainOrderAggregateOrderTableBase.Columns.Add("created_date", created_dateColumnBase2);
            var customer_idColumnBase = new ColumnBase<ColumnMappingBase>("customer_id", "uuid", drugStoreDomainOrderAggregateOrderTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainOrderAggregateOrderTableBase.Columns.Add("customer_id", customer_idColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("id", "uuid", drugStoreDomainOrderAggregateOrderTableBase);
            drugStoreDomainOrderAggregateOrderTableBase.Columns.Add("id", idColumnBase4);
            var payment_methodColumnBase = new ColumnBase<ColumnMappingBase>("payment_method", "integer", drugStoreDomainOrderAggregateOrderTableBase);
            drugStoreDomainOrderAggregateOrderTableBase.Columns.Add("payment_method", payment_methodColumnBase);
            var statusColumnBase = new ColumnBase<ColumnMappingBase>("status", "integer", drugStoreDomainOrderAggregateOrderTableBase);
            drugStoreDomainOrderAggregateOrderTableBase.Columns.Add("status", statusColumnBase);
            var update_dateColumnBase2 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", drugStoreDomainOrderAggregateOrderTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainOrderAggregateOrderTableBase.Columns.Add("update_date", update_dateColumnBase2);
            var versionColumnBase2 = new ColumnBase<ColumnMappingBase>("version", "uuid", drugStoreDomainOrderAggregateOrderTableBase);
            drugStoreDomainOrderAggregateOrderTableBase.Columns.Add("version", versionColumnBase2);
            relationalModel.DefaultTables.Add("DrugStore.Domain.OrderAggregate.Order", drugStoreDomainOrderAggregateOrderTableBase);
            var drugStoreDomainOrderAggregateOrderMappingBase = new TableMappingBase<ColumnMappingBase>(order, drugStoreDomainOrderAggregateOrderTableBase, true);
            drugStoreDomainOrderAggregateOrderTableBase.AddTypeMapping(drugStoreDomainOrderAggregateOrderMappingBase, false);
            defaultTableMappings4.Add(drugStoreDomainOrderAggregateOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, order.FindProperty("Id")!, drugStoreDomainOrderAggregateOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)codeColumnBase, order.FindProperty("Code")!, drugStoreDomainOrderAggregateOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase2, order.FindProperty("CreatedDate")!, drugStoreDomainOrderAggregateOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)customer_idColumnBase, order.FindProperty("CustomerId")!, drugStoreDomainOrderAggregateOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)payment_methodColumnBase, order.FindProperty("PaymentMethod")!, drugStoreDomainOrderAggregateOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase, order.FindProperty("Status")!, drugStoreDomainOrderAggregateOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase2, order.FindProperty("UpdateDate")!, drugStoreDomainOrderAggregateOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase2, order.FindProperty("Version")!, drugStoreDomainOrderAggregateOrderMappingBase);

            var tableMappings4 = new List<TableMapping>();
            order.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var ordersTable = new Table("orders", null, relationalModel);
            var idColumn4 = new Column("id", "uuid", ordersTable);
            ordersTable.Columns.Add("id", idColumn4);
            var codeColumn = new Column("code", "character varying(20)", ordersTable)
            {
                IsNullable = true
            };
            ordersTable.Columns.Add("code", codeColumn);
            var created_dateColumn2 = new Column("created_date", "timestamp with time zone", ordersTable);
            ordersTable.Columns.Add("created_date", created_dateColumn2);
            var customer_idColumn = new Column("customer_id", "uuid", ordersTable)
            {
                IsNullable = true
            };
            ordersTable.Columns.Add("customer_id", customer_idColumn);
            var payment_methodColumn = new Column("payment_method", "integer", ordersTable);
            ordersTable.Columns.Add("payment_method", payment_methodColumn);
            var statusColumn = new Column("status", "integer", ordersTable);
            ordersTable.Columns.Add("status", statusColumn);
            var update_dateColumn2 = new Column("update_date", "timestamp with time zone", ordersTable)
            {
                IsNullable = true
            };
            ordersTable.Columns.Add("update_date", update_dateColumn2);
            var versionColumn2 = new Column("version", "uuid", ordersTable);
            ordersTable.Columns.Add("version", versionColumn2);
            var pk_orders = new UniqueConstraint("pk_orders", ordersTable, new[] { idColumn4 });
            ordersTable.PrimaryKey = pk_orders;
            var pk_ordersUc = RelationalModel.GetKey(this,
                "DrugStore.Domain.OrderAggregate.Order",
                new[] { "Id" });
            pk_orders.MappedKeys.Add(pk_ordersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_ordersUc).Add(pk_orders);
            ordersTable.UniqueConstraints.Add("pk_orders", pk_orders);
            var ix_orders_customer_id = new TableIndex(
            "ix_orders_customer_id", ordersTable, new[] { customer_idColumn }, false);
            var ix_orders_customer_idIx = RelationalModel.GetIndex(this,
                "DrugStore.Domain.OrderAggregate.Order",
                new[] { "CustomerId" });
            ix_orders_customer_id.MappedIndexes.Add(ix_orders_customer_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_orders_customer_idIx).Add(ix_orders_customer_id);
            ordersTable.Indexes.Add("ix_orders_customer_id", ix_orders_customer_id);
            relationalModel.Tables.Add(("orders", null), ordersTable);
            var ordersTableMapping = new TableMapping(order, ordersTable, true);
            ordersTable.AddTypeMapping(ordersTableMapping, false);
            tableMappings4.Add(ordersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, order.FindProperty("Id")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(codeColumn, order.FindProperty("Code")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn2, order.FindProperty("CreatedDate")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(customer_idColumn, order.FindProperty("CustomerId")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(payment_methodColumn, order.FindProperty("PaymentMethod")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn, order.FindProperty("Status")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn2, order.FindProperty("UpdateDate")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn2, order.FindProperty("Version")!, ordersTableMapping);

            var orderItem = FindEntityType("DrugStore.Domain.OrderAggregate.OrderItem")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            orderItem.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var drugStoreDomainOrderAggregateOrderItemTableBase = new TableBase("DrugStore.Domain.OrderAggregate.OrderItem", null, relationalModel);
            var created_dateColumnBase3 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", drugStoreDomainOrderAggregateOrderItemTableBase);
            drugStoreDomainOrderAggregateOrderItemTableBase.Columns.Add("created_date", created_dateColumnBase3);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("id", "uuid", drugStoreDomainOrderAggregateOrderItemTableBase);
            drugStoreDomainOrderAggregateOrderItemTableBase.Columns.Add("id", idColumnBase5);
            var order_idColumnBase = new ColumnBase<ColumnMappingBase>("order_id", "uuid", drugStoreDomainOrderAggregateOrderItemTableBase);
            drugStoreDomainOrderAggregateOrderItemTableBase.Columns.Add("order_id", order_idColumnBase);
            var priceColumnBase = new ColumnBase<ColumnMappingBase>("price", "numeric(18,2)", drugStoreDomainOrderAggregateOrderItemTableBase);
            drugStoreDomainOrderAggregateOrderItemTableBase.Columns.Add("price", priceColumnBase);
            var product_idColumnBase = new ColumnBase<ColumnMappingBase>("product_id", "uuid", drugStoreDomainOrderAggregateOrderItemTableBase);
            drugStoreDomainOrderAggregateOrderItemTableBase.Columns.Add("product_id", product_idColumnBase);
            var quantityColumnBase = new ColumnBase<ColumnMappingBase>("quantity", "integer", drugStoreDomainOrderAggregateOrderItemTableBase);
            drugStoreDomainOrderAggregateOrderItemTableBase.Columns.Add("quantity", quantityColumnBase);
            var update_dateColumnBase3 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", drugStoreDomainOrderAggregateOrderItemTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainOrderAggregateOrderItemTableBase.Columns.Add("update_date", update_dateColumnBase3);
            var versionColumnBase3 = new ColumnBase<ColumnMappingBase>("version", "uuid", drugStoreDomainOrderAggregateOrderItemTableBase);
            drugStoreDomainOrderAggregateOrderItemTableBase.Columns.Add("version", versionColumnBase3);
            relationalModel.DefaultTables.Add("DrugStore.Domain.OrderAggregate.OrderItem", drugStoreDomainOrderAggregateOrderItemTableBase);
            var drugStoreDomainOrderAggregateOrderItemMappingBase = new TableMappingBase<ColumnMappingBase>(orderItem, drugStoreDomainOrderAggregateOrderItemTableBase, true);
            drugStoreDomainOrderAggregateOrderItemTableBase.AddTypeMapping(drugStoreDomainOrderAggregateOrderItemMappingBase, false);
            defaultTableMappings5.Add(drugStoreDomainOrderAggregateOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, orderItem.FindProperty("Id")!, drugStoreDomainOrderAggregateOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase3, orderItem.FindProperty("CreatedDate")!, drugStoreDomainOrderAggregateOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)order_idColumnBase, orderItem.FindProperty("OrderId")!, drugStoreDomainOrderAggregateOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)priceColumnBase, orderItem.FindProperty("Price")!, drugStoreDomainOrderAggregateOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_idColumnBase, orderItem.FindProperty("ProductId")!, drugStoreDomainOrderAggregateOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quantityColumnBase, orderItem.FindProperty("Quantity")!, drugStoreDomainOrderAggregateOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase3, orderItem.FindProperty("UpdateDate")!, drugStoreDomainOrderAggregateOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase3, orderItem.FindProperty("Version")!, drugStoreDomainOrderAggregateOrderItemMappingBase);

            var tableMappings5 = new List<TableMapping>();
            orderItem.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var order_detailsTable = new Table("order_details", null, relationalModel);
            var idColumn5 = new Column("id", "uuid", order_detailsTable);
            order_detailsTable.Columns.Add("id", idColumn5);
            var created_dateColumn3 = new Column("created_date", "timestamp with time zone", order_detailsTable);
            order_detailsTable.Columns.Add("created_date", created_dateColumn3);
            var order_idColumn = new Column("order_id", "uuid", order_detailsTable);
            order_detailsTable.Columns.Add("order_id", order_idColumn);
            var priceColumn = new Column("price", "numeric(18,2)", order_detailsTable);
            order_detailsTable.Columns.Add("price", priceColumn);
            var product_idColumn = new Column("product_id", "uuid", order_detailsTable);
            order_detailsTable.Columns.Add("product_id", product_idColumn);
            var quantityColumn = new Column("quantity", "integer", order_detailsTable);
            order_detailsTable.Columns.Add("quantity", quantityColumn);
            var update_dateColumn3 = new Column("update_date", "timestamp with time zone", order_detailsTable)
            {
                IsNullable = true
            };
            order_detailsTable.Columns.Add("update_date", update_dateColumn3);
            var versionColumn3 = new Column("version", "uuid", order_detailsTable);
            order_detailsTable.Columns.Add("version", versionColumn3);
            var pk_order_details = new UniqueConstraint("pk_order_details", order_detailsTable, new[] { idColumn5 });
            order_detailsTable.PrimaryKey = pk_order_details;
            var pk_order_detailsUc = RelationalModel.GetKey(this,
                "DrugStore.Domain.OrderAggregate.OrderItem",
                new[] { "Id" });
            pk_order_details.MappedKeys.Add(pk_order_detailsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_order_detailsUc).Add(pk_order_details);
            order_detailsTable.UniqueConstraints.Add("pk_order_details", pk_order_details);
            var ix_order_details_order_id = new TableIndex(
            "ix_order_details_order_id", order_detailsTable, new[] { order_idColumn }, false);
            var ix_order_details_order_idIx = RelationalModel.GetIndex(this,
                "DrugStore.Domain.OrderAggregate.OrderItem",
                new[] { "OrderId" });
            ix_order_details_order_id.MappedIndexes.Add(ix_order_details_order_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_order_details_order_idIx).Add(ix_order_details_order_id);
            order_detailsTable.Indexes.Add("ix_order_details_order_id", ix_order_details_order_id);
            var ix_order_details_product_id = new TableIndex(
            "ix_order_details_product_id", order_detailsTable, new[] { product_idColumn }, false);
            var ix_order_details_product_idIx = RelationalModel.GetIndex(this,
                "DrugStore.Domain.OrderAggregate.OrderItem",
                new[] { "ProductId" });
            ix_order_details_product_id.MappedIndexes.Add(ix_order_details_product_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_order_details_product_idIx).Add(ix_order_details_product_id);
            order_detailsTable.Indexes.Add("ix_order_details_product_id", ix_order_details_product_id);
            relationalModel.Tables.Add(("order_details", null), order_detailsTable);
            var order_detailsTableMapping = new TableMapping(orderItem, order_detailsTable, true);
            order_detailsTable.AddTypeMapping(order_detailsTableMapping, false);
            tableMappings5.Add(order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, orderItem.FindProperty("Id")!, order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn3, orderItem.FindProperty("CreatedDate")!, order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(order_idColumn, orderItem.FindProperty("OrderId")!, order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(priceColumn, orderItem.FindProperty("Price")!, order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(product_idColumn, orderItem.FindProperty("ProductId")!, order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(quantityColumn, orderItem.FindProperty("Quantity")!, order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn3, orderItem.FindProperty("UpdateDate")!, order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn3, orderItem.FindProperty("Version")!, order_detailsTableMapping);

            var product = FindEntityType("DrugStore.Domain.ProductAggregate.Product")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            product.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var drugStoreDomainProductAggregateProductTableBase = new TableBase("DrugStore.Domain.ProductAggregate.Product", null, relationalModel);
            var category_idColumnBase1 = new ColumnBase<ColumnMappingBase>("category_id", "uuid", drugStoreDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainProductAggregateProductTableBase.Columns.Add("category_id", category_idColumnBase1);
            var created_dateColumnBase4 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", drugStoreDomainProductAggregateProductTableBase);
            drugStoreDomainProductAggregateProductTableBase.Columns.Add("created_date", created_dateColumnBase4);
            var detailColumnBase1 = new ColumnBase<ColumnMappingBase>("detail", "character varying(500)", drugStoreDomainProductAggregateProductTableBase);
            drugStoreDomainProductAggregateProductTableBase.Columns.Add("detail", detailColumnBase1);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("id", "uuid", drugStoreDomainProductAggregateProductTableBase);
            drugStoreDomainProductAggregateProductTableBase.Columns.Add("id", idColumnBase6);
            var priceColumnBase0 = new ColumnBase<ColumnMappingBase>("price", "jsonb", drugStoreDomainProductAggregateProductTableBase);
            drugStoreDomainProductAggregateProductTableBase.Columns.Add("price", priceColumnBase0);
            var product_codeColumnBase = new ColumnBase<ColumnMappingBase>("product_code", "character varying(20)", drugStoreDomainProductAggregateProductTableBase);
            drugStoreDomainProductAggregateProductTableBase.Columns.Add("product_code", product_codeColumnBase);
            var quantityColumnBase0 = new ColumnBase<ColumnMappingBase>("quantity", "integer", drugStoreDomainProductAggregateProductTableBase);
            drugStoreDomainProductAggregateProductTableBase.Columns.Add("quantity", quantityColumnBase0);
            var statusColumnBase0 = new ColumnBase<ColumnMappingBase>("status", "integer", drugStoreDomainProductAggregateProductTableBase);
            drugStoreDomainProductAggregateProductTableBase.Columns.Add("status", statusColumnBase0);
            var titleColumnBase2 = new ColumnBase<ColumnMappingBase>("title", "character varying(100)", drugStoreDomainProductAggregateProductTableBase);
            drugStoreDomainProductAggregateProductTableBase.Columns.Add("title", titleColumnBase2);
            var update_dateColumnBase4 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", drugStoreDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainProductAggregateProductTableBase.Columns.Add("update_date", update_dateColumnBase4);
            var versionColumnBase4 = new ColumnBase<ColumnMappingBase>("version", "uuid", drugStoreDomainProductAggregateProductTableBase);
            drugStoreDomainProductAggregateProductTableBase.Columns.Add("version", versionColumnBase4);
            relationalModel.DefaultTables.Add("DrugStore.Domain.ProductAggregate.Product", drugStoreDomainProductAggregateProductTableBase);
            var drugStoreDomainProductAggregateProductMappingBase = new TableMappingBase<ColumnMappingBase>(product, drugStoreDomainProductAggregateProductTableBase, true);
            drugStoreDomainProductAggregateProductTableBase.AddTypeMapping(drugStoreDomainProductAggregateProductMappingBase, false);
            defaultTableMappings6.Add(drugStoreDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, product.FindProperty("Id")!, drugStoreDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)category_idColumnBase1, product.FindProperty("CategoryId")!, drugStoreDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase4, product.FindProperty("CreatedDate")!, drugStoreDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)detailColumnBase1, product.FindProperty("Detail")!, drugStoreDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)priceColumnBase0, product.FindProperty("Price")!, drugStoreDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_codeColumnBase, product.FindProperty("ProductCode")!, drugStoreDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quantityColumnBase0, product.FindProperty("Quantity")!, drugStoreDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase0, product.FindProperty("Status")!, drugStoreDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase2, product.FindProperty("Title")!, drugStoreDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase4, product.FindProperty("UpdateDate")!, drugStoreDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase4, product.FindProperty("Version")!, drugStoreDomainProductAggregateProductMappingBase);

            var tableMappings6 = new List<TableMapping>();
            product.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var productsTable = new Table("products", null, relationalModel);
            var idColumn6 = new Column("id", "uuid", productsTable);
            productsTable.Columns.Add("id", idColumn6);
            var category_idColumn1 = new Column("category_id", "uuid", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("category_id", category_idColumn1);
            var created_dateColumn4 = new Column("created_date", "timestamp with time zone", productsTable);
            productsTable.Columns.Add("created_date", created_dateColumn4);
            var detailColumn1 = new Column("detail", "character varying(500)", productsTable);
            productsTable.Columns.Add("detail", detailColumn1);
            var priceColumn0 = new Column("price", "jsonb", productsTable);
            productsTable.Columns.Add("price", priceColumn0);
            var product_codeColumn = new Column("product_code", "character varying(20)", productsTable);
            productsTable.Columns.Add("product_code", product_codeColumn);
            var quantityColumn0 = new Column("quantity", "integer", productsTable);
            productsTable.Columns.Add("quantity", quantityColumn0);
            var statusColumn0 = new Column("status", "integer", productsTable);
            productsTable.Columns.Add("status", statusColumn0);
            var titleColumn2 = new Column("title", "character varying(100)", productsTable);
            productsTable.Columns.Add("title", titleColumn2);
            var update_dateColumn4 = new Column("update_date", "timestamp with time zone", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("update_date", update_dateColumn4);
            var versionColumn4 = new Column("version", "uuid", productsTable);
            productsTable.Columns.Add("version", versionColumn4);
            var pk_products = new UniqueConstraint("pk_products", productsTable, new[] { idColumn6 });
            productsTable.PrimaryKey = pk_products;
            var pk_productsUc = RelationalModel.GetKey(this,
                "DrugStore.Domain.ProductAggregate.Product",
                new[] { "Id" });
            pk_products.MappedKeys.Add(pk_productsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_productsUc).Add(pk_products);
            productsTable.UniqueConstraints.Add("pk_products", pk_products);
            var ix_products_category_id = new TableIndex(
            "ix_products_category_id", productsTable, new[] { category_idColumn1 }, false);
            var ix_products_category_idIx = RelationalModel.GetIndex(this,
                "DrugStore.Domain.ProductAggregate.Product",
                new[] { "CategoryId" });
            ix_products_category_id.MappedIndexes.Add(ix_products_category_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_products_category_idIx).Add(ix_products_category_id);
            productsTable.Indexes.Add("ix_products_category_id", ix_products_category_id);
            relationalModel.Tables.Add(("products", null), productsTable);
            var productsTableMapping = new TableMapping(product, productsTable, true);
            productsTable.AddTypeMapping(productsTableMapping, false);
            tableMappings6.Add(productsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, product.FindProperty("Id")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(category_idColumn1, product.FindProperty("CategoryId")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn4, product.FindProperty("CreatedDate")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(detailColumn1, product.FindProperty("Detail")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(priceColumn0, product.FindProperty("Price")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(product_codeColumn, product.FindProperty("ProductCode")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(quantityColumn0, product.FindProperty("Quantity")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn0, product.FindProperty("Status")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn2, product.FindProperty("Title")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn4, product.FindProperty("UpdateDate")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn4, product.FindProperty("Version")!, productsTableMapping);

            var productImage = FindEntityType("DrugStore.Domain.ProductAggregate.ProductImage")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            productImage.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var drugStoreDomainProductAggregateProductImageTableBase = new TableBase("DrugStore.Domain.ProductAggregate.ProductImage", null, relationalModel);
            var altColumnBase = new ColumnBase<ColumnMappingBase>("alt", "character varying(100)", drugStoreDomainProductAggregateProductImageTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainProductAggregateProductImageTableBase.Columns.Add("alt", altColumnBase);
            var image_urlColumnBase = new ColumnBase<ColumnMappingBase>("image_url", "character varying(100)", drugStoreDomainProductAggregateProductImageTableBase);
            drugStoreDomainProductAggregateProductImageTableBase.Columns.Add("image_url", image_urlColumnBase);
            var is_mainColumnBase = new ColumnBase<ColumnMappingBase>("is_main", "boolean", drugStoreDomainProductAggregateProductImageTableBase);
            drugStoreDomainProductAggregateProductImageTableBase.Columns.Add("is_main", is_mainColumnBase);
            var product_idColumnBase0 = new ColumnBase<ColumnMappingBase>("product_id", "uuid", drugStoreDomainProductAggregateProductImageTableBase);
            drugStoreDomainProductAggregateProductImageTableBase.Columns.Add("product_id", product_idColumnBase0);
            var titleColumnBase3 = new ColumnBase<ColumnMappingBase>("title", "character varying(100)", drugStoreDomainProductAggregateProductImageTableBase)
            {
                IsNullable = true
            };
            drugStoreDomainProductAggregateProductImageTableBase.Columns.Add("title", titleColumnBase3);
            relationalModel.DefaultTables.Add("DrugStore.Domain.ProductAggregate.ProductImage", drugStoreDomainProductAggregateProductImageTableBase);
            var drugStoreDomainProductAggregateProductImageMappingBase = new TableMappingBase<ColumnMappingBase>(productImage, drugStoreDomainProductAggregateProductImageTableBase, true);
            drugStoreDomainProductAggregateProductImageTableBase.AddTypeMapping(drugStoreDomainProductAggregateProductImageMappingBase, false);
            defaultTableMappings7.Add(drugStoreDomainProductAggregateProductImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_idColumnBase0, productImage.FindProperty("ProductId")!, drugStoreDomainProductAggregateProductImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)altColumnBase, productImage.FindProperty("Alt")!, drugStoreDomainProductAggregateProductImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)image_urlColumnBase, productImage.FindProperty("ImageUrl")!, drugStoreDomainProductAggregateProductImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_mainColumnBase, productImage.FindProperty("IsMain")!, drugStoreDomainProductAggregateProductImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase3, productImage.FindProperty("Title")!, drugStoreDomainProductAggregateProductImageMappingBase);

            var tableMappings7 = new List<TableMapping>();
            productImage.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var product_imagesTable = new Table("product_images", null, relationalModel);
            var product_idColumn0 = new Column("product_id", "uuid", product_imagesTable);
            product_imagesTable.Columns.Add("product_id", product_idColumn0);
            var altColumn = new Column("alt", "character varying(100)", product_imagesTable)
            {
                IsNullable = true
            };
            product_imagesTable.Columns.Add("alt", altColumn);
            var image_urlColumn = new Column("image_url", "character varying(100)", product_imagesTable);
            product_imagesTable.Columns.Add("image_url", image_urlColumn);
            var is_mainColumn = new Column("is_main", "boolean", product_imagesTable);
            product_imagesTable.Columns.Add("is_main", is_mainColumn);
            var titleColumn3 = new Column("title", "character varying(100)", product_imagesTable)
            {
                IsNullable = true
            };
            product_imagesTable.Columns.Add("title", titleColumn3);
            var pk_product_images = new UniqueConstraint("pk_product_images", product_imagesTable, new[] { product_idColumn0 });
            product_imagesTable.PrimaryKey = pk_product_images;
            var pk_product_imagesUc = RelationalModel.GetKey(this,
                "DrugStore.Domain.ProductAggregate.ProductImage",
                new[] { "ProductId" });
            pk_product_images.MappedKeys.Add(pk_product_imagesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_product_imagesUc).Add(pk_product_images);
            product_imagesTable.UniqueConstraints.Add("pk_product_images", pk_product_images);
            relationalModel.Tables.Add(("product_images", null), product_imagesTable);
            var product_imagesTableMapping = new TableMapping(productImage, product_imagesTable, true);
            product_imagesTable.AddTypeMapping(product_imagesTableMapping, false);
            tableMappings7.Add(product_imagesTableMapping);
            RelationalModel.CreateColumnMapping(product_idColumn0, productImage.FindProperty("ProductId")!, product_imagesTableMapping);
            RelationalModel.CreateColumnMapping(altColumn, productImage.FindProperty("Alt")!, product_imagesTableMapping);
            RelationalModel.CreateColumnMapping(image_urlColumn, productImage.FindProperty("ImageUrl")!, product_imagesTableMapping);
            RelationalModel.CreateColumnMapping(is_mainColumn, productImage.FindProperty("IsMain")!, product_imagesTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn3, productImage.FindProperty("Title")!, product_imagesTableMapping);

            var identityRoleClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", null, relationalModel);
            var claim_typeColumnBase = new ColumnBase<ColumnMappingBase>("claim_type", "text", microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase.Columns.Add("claim_type", claim_typeColumnBase);
            var claim_valueColumnBase = new ColumnBase<ColumnMappingBase>("claim_value", "text", microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase.Columns.Add("claim_value", claim_valueColumnBase);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("id", "integer", microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase.Columns.Add("id", idColumnBase7);
            var role_idColumnBase = new ColumnBase<ColumnMappingBase>("role_id", "uuid", microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase.Columns.Add("role_id", role_idColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidMappingBase = new TableMappingBase<ColumnMappingBase>(identityRoleClaim, microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidMappingBase, false);
            defaultTableMappings8.Add(microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, identityRoleClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_typeColumnBase, identityRoleClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_valueColumnBase, identityRoleClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)role_idColumnBase, identityRoleClaim.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidMappingBase);

            var tableMappings8 = new List<TableMapping>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var aspNetRoleClaimsTable = new Table("AspNetRoleClaims", null, relationalModel);
            var idColumn7 = new Column("id", "integer", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("id", idColumn7);
            idColumn7.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var claim_typeColumn = new Column("claim_type", "text", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("claim_type", claim_typeColumn);
            var claim_valueColumn = new Column("claim_value", "text", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("claim_value", claim_valueColumn);
            var role_idColumn = new Column("role_id", "uuid", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("role_id", role_idColumn);
            var pk_asp_net_role_claims = new UniqueConstraint("pk_asp_net_role_claims", aspNetRoleClaimsTable, new[] { idColumn7 });
            aspNetRoleClaimsTable.PrimaryKey = pk_asp_net_role_claims;
            var pk_asp_net_role_claimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>",
                new[] { "Id" });
            pk_asp_net_role_claims.MappedKeys.Add(pk_asp_net_role_claimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_role_claimsUc).Add(pk_asp_net_role_claims);
            aspNetRoleClaimsTable.UniqueConstraints.Add("pk_asp_net_role_claims", pk_asp_net_role_claims);
            var ix_asp_net_role_claims_role_id = new TableIndex(
            "ix_asp_net_role_claims_role_id", aspNetRoleClaimsTable, new[] { role_idColumn }, false);
            var ix_asp_net_role_claims_role_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>",
                new[] { "RoleId" });
            ix_asp_net_role_claims_role_id.MappedIndexes.Add(ix_asp_net_role_claims_role_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_asp_net_role_claims_role_idIx).Add(ix_asp_net_role_claims_role_id);
            aspNetRoleClaimsTable.Indexes.Add("ix_asp_net_role_claims_role_id", ix_asp_net_role_claims_role_id);
            relationalModel.Tables.Add(("AspNetRoleClaims", null), aspNetRoleClaimsTable);
            var aspNetRoleClaimsTableMapping = new TableMapping(identityRoleClaim, aspNetRoleClaimsTable, true);
            aspNetRoleClaimsTable.AddTypeMapping(aspNetRoleClaimsTableMapping, false);
            tableMappings8.Add(aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, identityRoleClaim.FindProperty("Id")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_typeColumn, identityRoleClaim.FindProperty("ClaimType")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_valueColumn, identityRoleClaim.FindProperty("ClaimValue")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(role_idColumn, identityRoleClaim.FindProperty("RoleId")!, aspNetRoleClaimsTableMapping);

            var identityUserClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", null, relationalModel);
            var claim_typeColumnBase0 = new ColumnBase<ColumnMappingBase>("claim_type", "text", microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase.Columns.Add("claim_type", claim_typeColumnBase0);
            var claim_valueColumnBase0 = new ColumnBase<ColumnMappingBase>("claim_value", "text", microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase.Columns.Add("claim_value", claim_valueColumnBase0);
            var idColumnBase8 = new ColumnBase<ColumnMappingBase>("id", "integer", microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase.Columns.Add("id", idColumnBase8);
            var user_idColumnBase = new ColumnBase<ColumnMappingBase>("user_id", "uuid", microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase.Columns.Add("user_id", user_idColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase);
            var microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserClaim, microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidMappingBase, false);
            defaultTableMappings9.Add(microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase8, identityUserClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_typeColumnBase0, identityUserClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_valueColumnBase0, identityUserClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase, identityUserClaim.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidMappingBase);

            var tableMappings9 = new List<TableMapping>();
            identityUserClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var aspNetUserClaimsTable = new Table("AspNetUserClaims", null, relationalModel);
            var idColumn8 = new Column("id", "integer", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("id", idColumn8);
            idColumn8.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var claim_typeColumn0 = new Column("claim_type", "text", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("claim_type", claim_typeColumn0);
            var claim_valueColumn0 = new Column("claim_value", "text", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("claim_value", claim_valueColumn0);
            var user_idColumn = new Column("user_id", "uuid", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("user_id", user_idColumn);
            var pk_asp_net_user_claims = new UniqueConstraint("pk_asp_net_user_claims", aspNetUserClaimsTable, new[] { idColumn8 });
            aspNetUserClaimsTable.PrimaryKey = pk_asp_net_user_claims;
            var pk_asp_net_user_claimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>",
                new[] { "Id" });
            pk_asp_net_user_claims.MappedKeys.Add(pk_asp_net_user_claimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_user_claimsUc).Add(pk_asp_net_user_claims);
            aspNetUserClaimsTable.UniqueConstraints.Add("pk_asp_net_user_claims", pk_asp_net_user_claims);
            var ix_asp_net_user_claims_user_id = new TableIndex(
            "ix_asp_net_user_claims_user_id", aspNetUserClaimsTable, new[] { user_idColumn }, false);
            var ix_asp_net_user_claims_user_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>",
                new[] { "UserId" });
            ix_asp_net_user_claims_user_id.MappedIndexes.Add(ix_asp_net_user_claims_user_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_asp_net_user_claims_user_idIx).Add(ix_asp_net_user_claims_user_id);
            aspNetUserClaimsTable.Indexes.Add("ix_asp_net_user_claims_user_id", ix_asp_net_user_claims_user_id);
            relationalModel.Tables.Add(("AspNetUserClaims", null), aspNetUserClaimsTable);
            var aspNetUserClaimsTableMapping = new TableMapping(identityUserClaim, aspNetUserClaimsTable, true);
            aspNetUserClaimsTable.AddTypeMapping(aspNetUserClaimsTableMapping, false);
            tableMappings9.Add(aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn8, identityUserClaim.FindProperty("Id")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_typeColumn0, identityUserClaim.FindProperty("ClaimType")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_valueColumn0, identityUserClaim.FindProperty("ClaimValue")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn, identityUserClaim.FindProperty("UserId")!, aspNetUserClaimsTableMapping);

            var identityUserLogin = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserLogin.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", null, relationalModel);
            var login_providerColumnBase = new ColumnBase<ColumnMappingBase>("login_provider", "text", microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase.Columns.Add("login_provider", login_providerColumnBase);
            var provider_display_nameColumnBase = new ColumnBase<ColumnMappingBase>("provider_display_name", "text", microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase.Columns.Add("provider_display_name", provider_display_nameColumnBase);
            var provider_keyColumnBase = new ColumnBase<ColumnMappingBase>("provider_key", "text", microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase.Columns.Add("provider_key", provider_keyColumnBase);
            var user_idColumnBase0 = new ColumnBase<ColumnMappingBase>("user_id", "uuid", microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase.Columns.Add("user_id", user_idColumnBase0);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase);
            var microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserLogin, microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidMappingBase, false);
            defaultTableMappings10.Add(microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)login_providerColumnBase, identityUserLogin.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)provider_keyColumnBase, identityUserLogin.FindProperty("ProviderKey")!, microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)provider_display_nameColumnBase, identityUserLogin.FindProperty("ProviderDisplayName")!, microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase0, identityUserLogin.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidMappingBase);

            var tableMappings10 = new List<TableMapping>();
            identityUserLogin.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var aspNetUserLoginsTable = new Table("AspNetUserLogins", null, relationalModel);
            var login_providerColumn = new Column("login_provider", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("login_provider", login_providerColumn);
            var provider_keyColumn = new Column("provider_key", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("provider_key", provider_keyColumn);
            var provider_display_nameColumn = new Column("provider_display_name", "text", aspNetUserLoginsTable)
            {
                IsNullable = true
            };
            aspNetUserLoginsTable.Columns.Add("provider_display_name", provider_display_nameColumn);
            var user_idColumn0 = new Column("user_id", "uuid", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("user_id", user_idColumn0);
            var pk_asp_net_user_logins = new UniqueConstraint("pk_asp_net_user_logins", aspNetUserLoginsTable, new[] { login_providerColumn, provider_keyColumn });
            aspNetUserLoginsTable.PrimaryKey = pk_asp_net_user_logins;
            var pk_asp_net_user_loginsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>",
                new[] { "LoginProvider", "ProviderKey" });
            pk_asp_net_user_logins.MappedKeys.Add(pk_asp_net_user_loginsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_user_loginsUc).Add(pk_asp_net_user_logins);
            aspNetUserLoginsTable.UniqueConstraints.Add("pk_asp_net_user_logins", pk_asp_net_user_logins);
            var ix_asp_net_user_logins_user_id = new TableIndex(
            "ix_asp_net_user_logins_user_id", aspNetUserLoginsTable, new[] { user_idColumn0 }, false);
            var ix_asp_net_user_logins_user_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>",
                new[] { "UserId" });
            ix_asp_net_user_logins_user_id.MappedIndexes.Add(ix_asp_net_user_logins_user_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_asp_net_user_logins_user_idIx).Add(ix_asp_net_user_logins_user_id);
            aspNetUserLoginsTable.Indexes.Add("ix_asp_net_user_logins_user_id", ix_asp_net_user_logins_user_id);
            relationalModel.Tables.Add(("AspNetUserLogins", null), aspNetUserLoginsTable);
            var aspNetUserLoginsTableMapping = new TableMapping(identityUserLogin, aspNetUserLoginsTable, true);
            aspNetUserLoginsTable.AddTypeMapping(aspNetUserLoginsTableMapping, false);
            tableMappings10.Add(aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(login_providerColumn, identityUserLogin.FindProperty("LoginProvider")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(provider_keyColumn, identityUserLogin.FindProperty("ProviderKey")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(provider_display_nameColumn, identityUserLogin.FindProperty("ProviderDisplayName")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn0, identityUserLogin.FindProperty("UserId")!, aspNetUserLoginsTableMapping);

            var identityUserRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", null, relationalModel);
            var role_idColumnBase0 = new ColumnBase<ColumnMappingBase>("role_id", "uuid", microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase.Columns.Add("role_id", role_idColumnBase0);
            var user_idColumnBase1 = new ColumnBase<ColumnMappingBase>("user_id", "uuid", microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase.Columns.Add("user_id", user_idColumnBase1);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase);
            var microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserRole, microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidMappingBase, false);
            defaultTableMappings11.Add(microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)role_idColumnBase0, identityUserRole.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase1, identityUserRole.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidMappingBase);

            var tableMappings11 = new List<TableMapping>();
            identityUserRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var aspNetUserRolesTable = new Table("AspNetUserRoles", null, relationalModel);
            var user_idColumn1 = new Column("user_id", "uuid", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("user_id", user_idColumn1);
            var role_idColumn0 = new Column("role_id", "uuid", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("role_id", role_idColumn0);
            var pk_asp_net_user_roles = new UniqueConstraint("pk_asp_net_user_roles", aspNetUserRolesTable, new[] { user_idColumn1, role_idColumn0 });
            aspNetUserRolesTable.PrimaryKey = pk_asp_net_user_roles;
            var pk_asp_net_user_rolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>",
                new[] { "UserId", "RoleId" });
            pk_asp_net_user_roles.MappedKeys.Add(pk_asp_net_user_rolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_user_rolesUc).Add(pk_asp_net_user_roles);
            aspNetUserRolesTable.UniqueConstraints.Add("pk_asp_net_user_roles", pk_asp_net_user_roles);
            var ix_asp_net_user_roles_role_id = new TableIndex(
            "ix_asp_net_user_roles_role_id", aspNetUserRolesTable, new[] { role_idColumn0 }, false);
            var ix_asp_net_user_roles_role_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>",
                new[] { "RoleId" });
            ix_asp_net_user_roles_role_id.MappedIndexes.Add(ix_asp_net_user_roles_role_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_asp_net_user_roles_role_idIx).Add(ix_asp_net_user_roles_role_id);
            aspNetUserRolesTable.Indexes.Add("ix_asp_net_user_roles_role_id", ix_asp_net_user_roles_role_id);
            relationalModel.Tables.Add(("AspNetUserRoles", null), aspNetUserRolesTable);
            var aspNetUserRolesTableMapping = new TableMapping(identityUserRole, aspNetUserRolesTable, true);
            aspNetUserRolesTable.AddTypeMapping(aspNetUserRolesTableMapping, false);
            tableMappings11.Add(aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(role_idColumn0, identityUserRole.FindProperty("RoleId")!, aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn1, identityUserRole.FindProperty("UserId")!, aspNetUserRolesTableMapping);

            var identityUserToken = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserToken.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", null, relationalModel);
            var login_providerColumnBase0 = new ColumnBase<ColumnMappingBase>("login_provider", "text", microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase.Columns.Add("login_provider", login_providerColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("name", "text", microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase.Columns.Add("name", nameColumnBase0);
            var user_idColumnBase2 = new ColumnBase<ColumnMappingBase>("user_id", "uuid", microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase.Columns.Add("user_id", user_idColumnBase2);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("value", "text", microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase.Columns.Add("value", valueColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase);
            var microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserToken, microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidMappingBase, false);
            defaultTableMappings12.Add(microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)login_providerColumnBase0, identityUserToken.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, identityUserToken.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase2, identityUserToken.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, identityUserToken.FindProperty("Value")!, microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidMappingBase);

            var tableMappings12 = new List<TableMapping>();
            identityUserToken.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var aspNetUserTokensTable = new Table("AspNetUserTokens", null, relationalModel);
            var user_idColumn2 = new Column("user_id", "uuid", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("user_id", user_idColumn2);
            var login_providerColumn0 = new Column("login_provider", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("login_provider", login_providerColumn0);
            var nameColumn0 = new Column("name", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("name", nameColumn0);
            var valueColumn = new Column("value", "text", aspNetUserTokensTable)
            {
                IsNullable = true
            };
            aspNetUserTokensTable.Columns.Add("value", valueColumn);
            var pk_asp_net_user_tokens = new UniqueConstraint("pk_asp_net_user_tokens", aspNetUserTokensTable, new[] { user_idColumn2, login_providerColumn0, nameColumn0 });
            aspNetUserTokensTable.PrimaryKey = pk_asp_net_user_tokens;
            var pk_asp_net_user_tokensUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>",
                new[] { "UserId", "LoginProvider", "Name" });
            pk_asp_net_user_tokens.MappedKeys.Add(pk_asp_net_user_tokensUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_user_tokensUc).Add(pk_asp_net_user_tokens);
            aspNetUserTokensTable.UniqueConstraints.Add("pk_asp_net_user_tokens", pk_asp_net_user_tokens);
            relationalModel.Tables.Add(("AspNetUserTokens", null), aspNetUserTokensTable);
            var aspNetUserTokensTableMapping = new TableMapping(identityUserToken, aspNetUserTokensTable, true);
            aspNetUserTokensTable.AddTypeMapping(aspNetUserTokensTableMapping, false);
            tableMappings12.Add(aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(login_providerColumn0, identityUserToken.FindProperty("LoginProvider")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, identityUserToken.FindProperty("Name")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn2, identityUserToken.FindProperty("UserId")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, identityUserToken.FindProperty("Value")!, aspNetUserTokensTableMapping);
            var fk_asp_net_role_claims_asp_net_roles_role_id = new ForeignKeyConstraint(
                "fk_asp_net_role_claims_asp_net_roles_role_id", aspNetRoleClaimsTable, aspNetRolesTable,
                new[] { role_idColumn },
                aspNetRolesTable.FindUniqueConstraint("pk_asp_net_roles")!, ReferentialAction.Cascade);
            var fk_asp_net_role_claims_asp_net_roles_role_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>",
                new[] { "RoleId" },
                "DrugStore.Domain.IdentityAggregate.ApplicationRole",
                new[] { "Id" });
            fk_asp_net_role_claims_asp_net_roles_role_id.MappedForeignKeys.Add(fk_asp_net_role_claims_asp_net_roles_role_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_role_claims_asp_net_roles_role_idFk).Add(fk_asp_net_role_claims_asp_net_roles_role_id);
            aspNetRoleClaimsTable.ForeignKeyConstraints.Add(fk_asp_net_role_claims_asp_net_roles_role_id);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_role_claims_asp_net_roles_role_id);
            var fk_asp_net_user_claims_asp_net_users_user_id = new ForeignKeyConstraint(
                "fk_asp_net_user_claims_asp_net_users_user_id", aspNetUserClaimsTable, aspNetUsersTable,
                new[] { user_idColumn },
                aspNetUsersTable.FindUniqueConstraint("pk_asp_net_users")!, ReferentialAction.Cascade);
            var fk_asp_net_user_claims_asp_net_users_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>",
                new[] { "UserId" },
                "DrugStore.Domain.IdentityAggregate.ApplicationUser",
                new[] { "Id" });
            fk_asp_net_user_claims_asp_net_users_user_id.MappedForeignKeys.Add(fk_asp_net_user_claims_asp_net_users_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_claims_asp_net_users_user_idFk).Add(fk_asp_net_user_claims_asp_net_users_user_id);
            aspNetUserClaimsTable.ForeignKeyConstraints.Add(fk_asp_net_user_claims_asp_net_users_user_id);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_claims_asp_net_users_user_id);
            var fk_asp_net_user_logins_asp_net_users_user_id = new ForeignKeyConstraint(
                "fk_asp_net_user_logins_asp_net_users_user_id", aspNetUserLoginsTable, aspNetUsersTable,
                new[] { user_idColumn0 },
                aspNetUsersTable.FindUniqueConstraint("pk_asp_net_users")!, ReferentialAction.Cascade);
            var fk_asp_net_user_logins_asp_net_users_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>",
                new[] { "UserId" },
                "DrugStore.Domain.IdentityAggregate.ApplicationUser",
                new[] { "Id" });
            fk_asp_net_user_logins_asp_net_users_user_id.MappedForeignKeys.Add(fk_asp_net_user_logins_asp_net_users_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_logins_asp_net_users_user_idFk).Add(fk_asp_net_user_logins_asp_net_users_user_id);
            aspNetUserLoginsTable.ForeignKeyConstraints.Add(fk_asp_net_user_logins_asp_net_users_user_id);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_logins_asp_net_users_user_id);
            var fk_asp_net_user_roles_asp_net_roles_role_id = new ForeignKeyConstraint(
                "fk_asp_net_user_roles_asp_net_roles_role_id", aspNetUserRolesTable, aspNetRolesTable,
                new[] { role_idColumn0 },
                aspNetRolesTable.FindUniqueConstraint("pk_asp_net_roles")!, ReferentialAction.Cascade);
            var fk_asp_net_user_roles_asp_net_roles_role_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>",
                new[] { "RoleId" },
                "DrugStore.Domain.IdentityAggregate.ApplicationRole",
                new[] { "Id" });
            fk_asp_net_user_roles_asp_net_roles_role_id.MappedForeignKeys.Add(fk_asp_net_user_roles_asp_net_roles_role_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_roles_asp_net_roles_role_idFk).Add(fk_asp_net_user_roles_asp_net_roles_role_id);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fk_asp_net_user_roles_asp_net_roles_role_id);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_roles_asp_net_roles_role_id);
            var fk_asp_net_user_roles_asp_net_users_user_id = new ForeignKeyConstraint(
                "fk_asp_net_user_roles_asp_net_users_user_id", aspNetUserRolesTable, aspNetUsersTable,
                new[] { user_idColumn1 },
                aspNetUsersTable.FindUniqueConstraint("pk_asp_net_users")!, ReferentialAction.Cascade);
            var fk_asp_net_user_roles_asp_net_users_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>",
                new[] { "UserId" },
                "DrugStore.Domain.IdentityAggregate.ApplicationUser",
                new[] { "Id" });
            fk_asp_net_user_roles_asp_net_users_user_id.MappedForeignKeys.Add(fk_asp_net_user_roles_asp_net_users_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_roles_asp_net_users_user_idFk).Add(fk_asp_net_user_roles_asp_net_users_user_id);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fk_asp_net_user_roles_asp_net_users_user_id);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_roles_asp_net_users_user_id);
            var fk_asp_net_user_tokens_asp_net_users_user_id = new ForeignKeyConstraint(
                "fk_asp_net_user_tokens_asp_net_users_user_id", aspNetUserTokensTable, aspNetUsersTable,
                new[] { user_idColumn2 },
                aspNetUsersTable.FindUniqueConstraint("pk_asp_net_users")!, ReferentialAction.Cascade);
            var fk_asp_net_user_tokens_asp_net_users_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>",
                new[] { "UserId" },
                "DrugStore.Domain.IdentityAggregate.ApplicationUser",
                new[] { "Id" });
            fk_asp_net_user_tokens_asp_net_users_user_id.MappedForeignKeys.Add(fk_asp_net_user_tokens_asp_net_users_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_tokens_asp_net_users_user_idFk).Add(fk_asp_net_user_tokens_asp_net_users_user_id);
            aspNetUserTokensTable.ForeignKeyConstraints.Add(fk_asp_net_user_tokens_asp_net_users_user_id);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_tokens_asp_net_users_user_id);
            var fk_news_categories_category_id = new ForeignKeyConstraint(
                "fk_news_categories_category_id", newsTable, categoriesTable,
                new[] { category_idColumn },
                categoriesTable.FindUniqueConstraint("pk_categories")!, ReferentialAction.SetNull);
            var fk_news_categories_category_idFk = RelationalModel.GetForeignKey(this,
                "DrugStore.Domain.CategoryAggregate.News",
                new[] { "CategoryId" },
                "DrugStore.Domain.CategoryAggregate.Category",
                new[] { "Id" });
            fk_news_categories_category_id.MappedForeignKeys.Add(fk_news_categories_category_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_news_categories_category_idFk).Add(fk_news_categories_category_id);
            newsTable.ForeignKeyConstraints.Add(fk_news_categories_category_id);
            categoriesTable.ReferencingForeignKeyConstraints.Add(fk_news_categories_category_id);
            var fk_order_details_orders_order_id = new ForeignKeyConstraint(
                "fk_order_details_orders_order_id", order_detailsTable, ordersTable,
                new[] { order_idColumn },
                ordersTable.FindUniqueConstraint("pk_orders")!, ReferentialAction.NoAction);
            var fk_order_details_orders_order_idFk = RelationalModel.GetForeignKey(this,
                "DrugStore.Domain.OrderAggregate.OrderItem",
                new[] { "OrderId" },
                "DrugStore.Domain.OrderAggregate.Order",
                new[] { "Id" });
            fk_order_details_orders_order_id.MappedForeignKeys.Add(fk_order_details_orders_order_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_order_details_orders_order_idFk).Add(fk_order_details_orders_order_id);
            order_detailsTable.ForeignKeyConstraints.Add(fk_order_details_orders_order_id);
            ordersTable.ReferencingForeignKeyConstraints.Add(fk_order_details_orders_order_id);
            var fk_order_details_products_product_id = new ForeignKeyConstraint(
                "fk_order_details_products_product_id", order_detailsTable, productsTable,
                new[] { product_idColumn },
                productsTable.FindUniqueConstraint("pk_products")!, ReferentialAction.NoAction);
            var fk_order_details_products_product_idFk = RelationalModel.GetForeignKey(this,
                "DrugStore.Domain.OrderAggregate.OrderItem",
                new[] { "ProductId" },
                "DrugStore.Domain.ProductAggregate.Product",
                new[] { "Id" });
            fk_order_details_products_product_id.MappedForeignKeys.Add(fk_order_details_products_product_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_order_details_products_product_idFk).Add(fk_order_details_products_product_id);
            order_detailsTable.ForeignKeyConstraints.Add(fk_order_details_products_product_id);
            productsTable.ReferencingForeignKeyConstraints.Add(fk_order_details_products_product_id);
            var fk_orders_users_customer_id = new ForeignKeyConstraint(
                "fk_orders_users_customer_id", ordersTable, aspNetUsersTable,
                new[] { customer_idColumn },
                aspNetUsersTable.FindUniqueConstraint("pk_asp_net_users")!, ReferentialAction.SetNull);
            var fk_orders_users_customer_idFk = RelationalModel.GetForeignKey(this,
                "DrugStore.Domain.OrderAggregate.Order",
                new[] { "CustomerId" },
                "DrugStore.Domain.IdentityAggregate.ApplicationUser",
                new[] { "Id" });
            fk_orders_users_customer_id.MappedForeignKeys.Add(fk_orders_users_customer_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_orders_users_customer_idFk).Add(fk_orders_users_customer_id);
            ordersTable.ForeignKeyConstraints.Add(fk_orders_users_customer_id);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fk_orders_users_customer_id);
            var fk_posts_categories_category_id = new ForeignKeyConstraint(
                "fk_posts_categories_category_id", postsTable, categoriesTable,
                new[] { category_idColumn0 },
                categoriesTable.FindUniqueConstraint("pk_categories")!, ReferentialAction.SetNull);
            var fk_posts_categories_category_idFk = RelationalModel.GetForeignKey(this,
                "DrugStore.Domain.CategoryAggregate.Post",
                new[] { "CategoryId" },
                "DrugStore.Domain.CategoryAggregate.Category",
                new[] { "Id" });
            fk_posts_categories_category_id.MappedForeignKeys.Add(fk_posts_categories_category_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_posts_categories_category_idFk).Add(fk_posts_categories_category_id);
            postsTable.ForeignKeyConstraints.Add(fk_posts_categories_category_id);
            categoriesTable.ReferencingForeignKeyConstraints.Add(fk_posts_categories_category_id);
            var fk_product_images_products_product_id = new ForeignKeyConstraint(
                "fk_product_images_products_product_id", product_imagesTable, productsTable,
                new[] { product_idColumn0 },
                productsTable.FindUniqueConstraint("pk_products")!, ReferentialAction.Cascade);
            var fk_product_images_products_product_idFk = RelationalModel.GetForeignKey(this,
                "DrugStore.Domain.ProductAggregate.ProductImage",
                new[] { "ProductId" },
                "DrugStore.Domain.ProductAggregate.Product",
                new[] { "Id" });
            fk_product_images_products_product_id.MappedForeignKeys.Add(fk_product_images_products_product_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_product_images_products_product_idFk).Add(fk_product_images_products_product_id);
            product_imagesTable.ForeignKeyConstraints.Add(fk_product_images_products_product_id);
            productsTable.ReferencingForeignKeyConstraints.Add(fk_product_images_products_product_id);
            var fk_products_categories_category_id = new ForeignKeyConstraint(
                "fk_products_categories_category_id", productsTable, categoriesTable,
                new[] { category_idColumn1 },
                categoriesTable.FindUniqueConstraint("pk_categories")!, ReferentialAction.SetNull);
            var fk_products_categories_category_idFk = RelationalModel.GetForeignKey(this,
                "DrugStore.Domain.ProductAggregate.Product",
                new[] { "CategoryId" },
                "DrugStore.Domain.CategoryAggregate.Category",
                new[] { "Id" });
            fk_products_categories_category_id.MappedForeignKeys.Add(fk_products_categories_category_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_products_categories_category_idFk).Add(fk_products_categories_category_id);
            productsTable.ForeignKeyConstraints.Add(fk_products_categories_category_id);
            categoriesTable.ReferencingForeignKeyConstraints.Add(fk_products_categories_category_id);
            return relationalModel.MakeReadOnly();
        }
    }
}
